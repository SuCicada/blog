<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>leetcode on SuCicada</title>
    <link>https://sucicada.github.io/blog/tags/leetcode/</link>
    <description>Recent content in leetcode on SuCicada</description>
    <image>
      <url>https://sucicada.github.io/blog/papermod-cover.png</url>
      <link>https://sucicada.github.io/blog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://sucicada.github.io/blog/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[leetcode][Algorithm] -13. Roman to Integer with [Java]</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcodealgorithm-13.-roman-to-integer-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcodealgorithm-13.-roman-to-integer-with-java/</guid>
      <description>problem
class Solution { public int romanToInt(String s) { int N = s.length(); int sum = 0; char a = 0; int b = 0; int c = 0; for(int i=0;i&amp;lt;N;i++){ c = b; a = s.charAt(i); if(a == &amp;#39;I&amp;#39;){ b = 1; }else if(a == &amp;#39;V&amp;#39;){ b = 5; }else if(a == &amp;#39;X&amp;#39;){ b = 10; }else if(a == &amp;#39;L&amp;#39;){ b = 50; }else if(a == &amp;#39;C&amp;#39;){ b = 100; }else if(a == &amp;#39;D&amp;#39;){ b = 500; }else if(a == &amp;#39;M&amp;#39;){ b = 1000; } // System.</description>
    </item>
    
    <item>
      <title>[leetcode][DataBase] - 175. Combine Two Tables with MySQL</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcodedatabase-175.-combine-two-tables-with-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcodedatabase-175.-combine-two-tables-with-mysql/</guid>
      <description>题目
select FirstName, LastName, City, State from Person left join Address using (PersonId); or
select FirstName, LastName, City, State from Person left join Address on Person.PersonId=Address.PersonId; </description>
    </item>
    
    <item>
      <title>[leetcode][DataBase] - 176. Second Highest Salary with [MySQL]</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcodedatabase-176.-second-highest-salary-with-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcodedatabase-176.-second-highest-salary-with-mysql/</guid>
      <description>problem
select ifnull((select distinct Salary from Employee order by Salary desc limit 1,1), null) as SecondHighestSalary; or other
select max(Salary) as SecondHighestSalary from employee where Salary &amp;lt; (select max(Salary) from employee); </description>
    </item>
    
    <item>
      <title>[leetcode][DataBase] - 177. Nth Highest Salary with [MySQL]</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcodedatabase-177.-nth-highest-salary-with-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcodedatabase-177.-nth-highest-salary-with-mysql/</guid>
      <description>problem
# 184ms select min(aa.Salary) from (select distinct Salary from employee order by Salary desc limit N) as aa where (select count(distinct Salary) from employee) &amp;gt;= N or
# 188ms select aa.Salary as ass from (select distinct Salary from employee order by Salary desc limit N) as aa where (select count(distinct Salary) from employee) &amp;gt;= N order by ass limit 1 </description>
    </item>
    
    <item>
      <title>[leetcode][DataBase] - 178. Rank Scores with [MySQL]</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcodedatabase-178.-rank-scores-with-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcodedatabase-178.-rank-scores-with-mysql/</guid>
      <description>problem
select inn.Score,inn.Rank from ( select ss.Score,@row:=@row+1 as Rank from (select @row:=0) a, (select Score from Scores group by Score) as ss order by ss.Score desc ) as inn right join Scores as sss on inn.Score = sss.Score order by inn.Score desc ; </description>
    </item>
    
    <item>
      <title>leetcode  - 12. Integer to Roman with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-12.-integer-to-roman-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-12.-integer-to-roman-with-java/</guid>
      <description>problem
方法一，一位一位判断。
class Solution { public String intToRoman1(int num) { StringBuilder sb = new StringBuilder(); char ooo[] = new char[]{&amp;#39;I&amp;#39;,&amp;#39;V&amp;#39;,&amp;#39;X&amp;#39;,&amp;#39;L&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;D&amp;#39;,&amp;#39;M&amp;#39;}; int wei = 0; while(num&amp;gt;0){ int n = num %10; if(n&amp;lt;4){ for(int i=0;i&amp;lt;n;i++){ sb.append(ooo[wei*2]); } }else if(n==4){ sb.append(ooo[wei*2+1]); sb.append(ooo[wei*2]); }else if(n==5){ sb.append(ooo[wei*2+1]); }else if(n&amp;gt;5 &amp;amp;&amp;amp; n&amp;lt;9){ for(int i=0;i&amp;lt;n-5;i++){ sb.append(ooo[wei*2]); } sb.append(ooo[wei*2+1]); }else if(n==9){ sb.append(ooo[wei*2+1+1]); sb.append(ooo[wei*2]); } wei++; num = num/10; } return sb.reverse().toString(); } 方法二，因为知道最多4位数，所以打表暴力。
public String intToRoman(int num) { String s1[] = new String[]{&amp;#34;&amp;#34;,&amp;#34;I&amp;#34;,&amp;#34;II&amp;#34;,&amp;#34;III&amp;#34;,&amp;#34;IV&amp;#34;,&amp;#34;V&amp;#34;,&amp;#34;VI&amp;#34;,&amp;#34;VII&amp;#34;,&amp;#34;VIII&amp;#34;,&amp;#34;IX&amp;#34;}; String s2[] = new String[]{&amp;#34;&amp;#34;,&amp;#34;X&amp;#34;,&amp;#34;XX&amp;#34;,&amp;#34;XXX&amp;#34;,&amp;#34;XL&amp;#34;,&amp;#34;L&amp;#34;,&amp;#34;LX&amp;#34;,&amp;#34;LXX&amp;#34;,&amp;#34;LXXX&amp;#34;,&amp;#34;XC&amp;#34;}; String s3[] = new String[]{&amp;#34;&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;CC&amp;#34;,&amp;#34;CCC&amp;#34;,&amp;#34;CD&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;DC&amp;#34;,&amp;#34;DCC&amp;#34;,&amp;#34;DCCC&amp;#34;,&amp;#34;CM&amp;#34;}; String s4[] = new String[]{&amp;#34;&amp;#34;,&amp;#34;M&amp;#34;,&amp;#34;MM&amp;#34;,&amp;#34;MMM&amp;#34;}; // return s4[(num/1000)%10]+s3[(num/100)%10]+s2[(num/10)%10]+s1[num%10]; return new StringBuilder().</description>
    </item>
    
    <item>
      <title>leetcode - 1. Two Sum with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-1.-two-sum-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-1.-two-sum-with-java/</guid>
      <description>https://leetcode.com/problems/two-sum/submissions/
import java.util.*; class Main { public int[] fun(int []nums,int target) { Map&amp;lt;Integer,Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); for(int i=0;i&amp;lt;nums.length;i++){ int f = target - nums[i]; if(map.get(f)!=null){ return new int[]{map.get(f),i}; }else{ map.put(nums[i],i); } } return null; } public static void main(String[] args) { int []nums = {12,3,3,53,45,7,7,3}; int []res = new Main().fun(nums,10); System.out.println(Arrays.toString(nums)); System.out.println(Arrays.toString(res)); } } </description>
    </item>
    
    <item>
      <title>leetcode - 11. Container With Most Water with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-11.-container-with-most-water-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-11.-container-with-most-water-with-java/</guid>
      <description>problem
import java.lang.reflect.Method; import java.util.*; class Solution { public int maxArea(int[] height) { int max = 0; int left = 0; int right = height.length-1; int a,b; while(left&amp;lt;right){ a = height[left]; b = height[right]; max = Math.max(max, Math.min(a,b)*(right-left)); if(a &amp;gt; b){ right -- ; }else{ left ++; } System.out.println(left+&amp;#34; &amp;#34;+right+&amp;#34; &amp;#34;); } return max; } } class Main { public static void main(String[] args) throws Exception{ Solution solution = new Solution(); int i = solution.</description>
    </item>
    
    <item>
      <title>leetcode - 2. Add Two Numbers with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-2.-add-two-numbers-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-2.-add-two-numbers-with-java/</guid>
      <description>https://leetcode.com/problems/add-two-numbers/submissions/
/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode res = new ListNode(0); ListNode head = res; int flag = 0; while(l1!=null || l2!=null || flag!=0){ int num = (l1==null?0:l1.val) + (l2==null? 0: l2.val) + flag; res.next = new ListNode(num%10); flag = num/10; res = res.</description>
    </item>
    
    <item>
      <title>leetcode - 3. Longest Substring Without Repeating Characters with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-3.-longest-substring-without-repeating-characters-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-3.-longest-substring-without-repeating-characters-with-java/</guid>
      <description>题目链接
import java.lang.reflect.Method; class Solution { /*两个方法都是：end无所谓的在一个一个移动，begin则是追寻之前的循环体留下的信标 关键在于信标是怎么设置下的，第一种方法是每一次都从序列中寻找信标。 第二种直接记录了下来。 一个用时间换空间，一个用空间换时间。 */ public int lengthOfLongestSubstring1(String s) { int sum = 0; int begin = 0; int end = 0; for(end = begin;end&amp;lt;s.length();end++){ /*每次都移动尾指针*/ for(int i = begin;i&amp;lt;end;i++){ /*验证重复，和end处比较，如果没有重复，说明这个子串可以加入end处的字符 而无论是否重复，都不影响移动尾指针end，影响的只是begin的位置。 */ if(s.charAt(i) == s.charAt(end)){ sum = Math.max(sum,end-begin); begin = i+1; break; } } } /*最后的end会指向最后一个的下一个，所以需要再判断一下夹住的是不是大的， eg: ab or aab */ return Math.max(sum,end-begin); } public int lengthOfLongestSubstring2(String s) { int ascii[] = new int[128]; int sum = 0; int begin = 0; for(int i=0;i&amp;lt;s.</description>
    </item>
    
    <item>
      <title>leetcode - 4. Median of Two Sorted Arrays with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-4.-median-of-two-sorted-arrays-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-4.-median-of-two-sorted-arrays-with-java/</guid>
      <description>简单做法, 左边哪一些, 右边拿一下, 看谁小拿谁.
但是时间复杂度达不到要求, 虽然在leetcode上也是很快
public double findMedianSortedArrays1(int[] A,int[] B){ /* time complexity: O((m+n)/2+1) */ int m = A.length; int n = B.length; int index1 = 0; int index2 = 0; int num1=0; int num2=0; for(int i=0;i&amp;lt;(m+n)/2+1;i++){ num2 = num1; if(index1 == m){ num1 = B[index2]; index2 ++; }else if(index2 == n){ num1 = A[index1]; index1++; }else if(A[index1] &amp;lt; B[index2]){ num1 = A[index1]; index1++; }else{ num1 = B[index2]; index2++; } } System.</description>
    </item>
    
    <item>
      <title>leetcode - 5. Longest Palindromic Substring with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-5.-longest-palindromic-substring-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-5.-longest-palindromic-substring-with-java/</guid>
      <description>题目在我这里
方法一，大暴力
public String longestPalindrome1(String s) { /* very force: O(s.length()^2) 空间复杂度 O(1) */ int i=0; int j=0; boolean flag = false; int maxi = i; int maxj = j; for(i=0;i&amp;lt;s.length();i++){ for(j=s.length()-1;j&amp;gt;i;j--){ if(s.charAt(i)==s.charAt(j)){ int ii = i; int jj = j; for(jj=j;jj&amp;gt;ii;jj--,ii++){ if(s.charAt(ii)!=s.charAt(jj)){ // flag = true; break; } } System.out.println(ii+&amp;#34; - &amp;#34;+jj); if(ii&amp;gt;=jj){ flag = true; break; } } } if(flag){ if(j-i &amp;gt; maxj-maxi){ maxj = j; maxi = i; } } } if(s.</description>
    </item>
    
    <item>
      <title>leetcode - 6. ZigZag Conversion with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-6.-zigzag-conversion-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-6.-zigzag-conversion-with-java/</guid>
      <description>题目地址
这道题涉及到String, StringBuffer, StringBuilder的知识点
String在拼接时需要new新的String对象, 而它除了hash之外都是final属性, 分配空间会造成时间损耗.
所以String不适合大量拼接. 使用String可是耗时18ms呢
StringBuffer解决了这个问题, 它提升了速度, 是线程安全.
而StringBuilder 和StringBuffer类似, 但它是线程不安全, 这也使得它比StringBuffer拼接更快. 本题只需3ms
有没有更快的呢, 当然有, 还就是它了 char[], 只需2ms(笑)
import java.lang.reflect.Method; import java.util.*; class Solution { public String convert(String s, int numRows) { int N = s.length(); // StringBuilder res = new StringBuilder(); char res[] = new char[N]; int cycle = (numRows-1)*2; int index = 0; if(numRows==1){ return s; } for(int row=0;row&amp;lt;numRows;row++){ /* row 0 6 1 4 2 2 2 4 3 0 */ for(int i=row;i&amp;lt;N;i+=cycle){ /* 一个锯齿*/ // res.</description>
    </item>
    
    <item>
      <title>leetcode - 7. Reverse Integer with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-7.-reverse-integer-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-7.-reverse-integer-with-java/</guid>
      <description>where is problem 搞笑的空间复杂度
使用long，最后进行比较会更小，不知道为什么
class Solution { public int reverse(int x) { boolean minus = x&amp;lt;0; x *= minus?-1:1; int res = 0; while(x&amp;gt;0){ if(res*10/10 != res){ return 0; } res = res*10 + x%10; x = x/10; } return res * (minus?-1:1); } } </description>
    </item>
    
    <item>
      <title>leetcode - 8. String to Integer (atoi) with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-8.-string-to-integer-atoi-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-8.-string-to-integer-atoi-with-java/</guid>
      <description>题目
class Solution { public int myAtoi(String str) { int N = str.length(); int minus = 0; long res = 0; for(int i=0;i&amp;lt;N;i++){ char ch = str.charAt(i); System.out.println(ch+&amp;#34; &amp;#34;+minus); if((ch == &amp;#39;-&amp;#39; || ch == &amp;#39;+&amp;#39;) &amp;amp;&amp;amp; minus == 0){ minus = ch==&amp;#39;+&amp;#39;?1:-1; }else if(ch ==&amp;#39; &amp;#39; &amp;amp;&amp;amp; minus==0){ }else if(ch &amp;lt;=&amp;#39;9&amp;#39; &amp;amp;&amp;amp; ch&amp;gt;=&amp;#39;0&amp;#39;){ if(minus == 0){ minus = 1; } res = res*10 + ch-&amp;#39;0&amp;#39;; if(res != (int)res){ return minus==1?</description>
    </item>
    
    <item>
      <title>leetcode - 9. Palindrome Number with Java</title>
      <link>https://sucicada.github.io/blog/posts/leetcode/leetcode-9.-palindrome-number-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/leetcode/leetcode-9.-palindrome-number-with-java/</guid>
      <description>题目
class Solution { public boolean isPalindrome(int x) { if(x&amp;lt;0){ return false; } int a = 0; int b = x; while(x&amp;gt;0){ a = a * 10 + x%10; x = x/10; } return a==b; } } </description>
    </item>
    
  </channel>
</rss>
