<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>soft on SuCicada</title>
    <link>https://sucicada.github.io/blog/tags/soft/</link>
    <description>Recent content in soft on SuCicada</description>
    <image>
      <url>https://sucicada.github.io/blog/papermod-cover.png</url>
      <link>https://sucicada.github.io/blog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://sucicada.github.io/blog/tags/soft/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>（C语言）换热器报价生成器设计报告</title>
      <link>https://sucicada.github.io/blog/posts/soft/c%E8%AF%AD%E8%A8%80%E6%8D%A2%E7%83%AD%E5%99%A8%E6%8A%A5%E4%BB%B7%E7%94%9F%E6%88%90%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/c%E8%AF%AD%E8%A8%80%E6%8D%A2%E7%83%AD%E5%99%A8%E6%8A%A5%E4%BB%B7%E7%94%9F%E6%88%90%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Solve Error] Install g&#43;&#43; in Ubuntu20.04 :  g&#43;&#43; : Depends: g&#43;&#43;-7 (＞= 7.4.0-1~)</title>
      <link>https://sucicada.github.io/blog/posts/soft/solve-error-install-g&#43;&#43;-in-ubuntu20.04-g&#43;&#43;-depends-g&#43;&#43;-7-7.4.0-1~/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/solve-error-install-g&#43;&#43;-in-ubuntu20.04-g&#43;&#43;-depends-g&#43;&#43;-7-7.4.0-1~/</guid>
      <description>这是在Windows10上的Ubuntu WSL环境中遇到的问题。
目前的Ubuntu版本是Ubuntu 20.04.1 LTS。并且使用了阿里的apt镜像源。
先说结论，Ubuntu版本之高使得本机使用apt源中没有所需的库版本。所以可以尝试将apt源换回官方源。然后apt update再安装g++。
以下是断案过程。
在使用命令sudo apt install g++遇到了依赖问题。整个依赖链排查结果如下：
sucicada@20200702-143805:/etc/apt/sources.list.d$ sudo apt install g++ Reading package lists... Done Building dependency tree Reading state information... Done Some packages could not be installed. This may mean that you have requested an impossible situation or if you are using the unstable distribution that some required packages have not yet been created or been moved out of Incoming. The following information may help to resolve the situation: The following packages have unmet dependencies: g++ : Depends: g++-7 (&amp;gt;= 7.</description>
    </item>
    
    <item>
      <title>APG -- Algorithm PlayGround 基于Phaser 的算法游戏（类rpg）框架</title>
      <link>https://sucicada.github.io/blog/posts/soft/apg--algorithm-playground-%E5%9F%BA%E4%BA%8Ephaser-%E7%9A%84%E7%AE%97%E6%B3%95%E6%B8%B8%E6%88%8F%E7%B1%BBrpg%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/apg--algorithm-playground-%E5%9F%BA%E4%BA%8Ephaser-%E7%9A%84%E7%AE%97%E6%B3%95%E6%B8%B8%E6%88%8F%E7%B1%BBrpg%E6%A1%86%E6%9E%B6/</guid>
      <description>APG——Algorithm PlayGround 项目地址 一个有趣，智能和简单的HTML5游戏框架
简单的开发方式，将你的算法变成游戏
对PhaserCE库的封装开发
70+个函数接口可供使用，通过配置文件智能优化游戏
提供可视化的地图编辑方案
官网 官网(备用)
Demo 演示 git page(可能会慢) 国内使用
使用在线地图编辑器 APG MapEditor 下载 APG.js
MapEditor
使用在线库 github直连 https://sucicada.github.io/Algorithm-PlayGround/dist/APG.js 国内使用（更快） http://sucicada.tk:39/APG/dist/APG.js 最后 十分感谢 @llwwdbd, @lesen-bee 在开发期间所提供的帮助 </description>
    </item>
    
    <item>
      <title>assmbly 8086汇编：判断奇数偶数</title>
      <link>https://sucicada.github.io/blog/posts/soft/assmbly-8086%E6%B1%87%E7%BC%96%E5%88%A4%E6%96%AD%E5%A5%87%E6%95%B0%E5%81%B6%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/assmbly-8086%E6%B1%87%E7%BC%96%E5%88%A4%E6%96%AD%E5%A5%87%E6%95%B0%E5%81%B6%E6%95%B0/</guid>
      <description>如果ax中的数是奇数：bx为0
否则bx为1
; judge which the number in ax is odd or even assume cs:code code segment mov ax,[bx] mov cx,ax mov bx,0 s: loop i ; if can&amp;#39;t loop , cx is 1 ; every loop, cx -= 2 ; odd mov bx,0 loop k i: ; sub cx,1 loop s ; even mov bx,1 ; loop k k: ;over mov ax,4c00h int 21h code ends end </description>
    </item>
    
    <item>
      <title>atom删除文件: The following file couldn&#39;t be moved to trash (is gvfs-trash installed?)</title>
      <link>https://sucicada.github.io/blog/posts/soft/atom%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-the-following-file-couldnt-be-moved-to-trash-is-gvfs-trash-installed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/atom%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-the-following-file-couldnt-be-moved-to-trash-is-gvfs-trash-installed/</guid>
      <description>参考这个
在使用加环境变量无果
环境
ubuntu 16
atom 1.4
执行以下命令
sudo mkdir -p /.Trash-1000/{expunged,files,info} sudo chown -R $USER /.Trash-1000 </description>
    </item>
    
    <item>
      <title>cin、cin.get()、cin.getline()、getline()、gets()等函数的用法</title>
      <link>https://sucicada.github.io/blog/posts/soft/cincin.getcin.getlinegetlinegets%E7%AD%89%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/cincin.getcin.getlinegetlinegets%E7%AD%89%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>参考于cin、cin.get()、cin.getline()、getline()、gets()等函数的用法
cin&amp;raquo;
(1) &amp;raquo; 是会过滤掉不可见字符（如 空格 回车，TAB 等） cin.get()
(1) cin.get(char);//接受一个字符
(2) cin.get(char*,接收字符数目);//可以接收空格，接收数目=实际接收字符+1个&amp;rsquo;\0&#39; cin.getline()
(1) cin.getline(char*,接收数目);
//可以接收空格，接收数目=实际接收字符+1个&amp;rsquo;\0&#39;
(2) cin.getline(char*,接收数目,结束字符)
//当第三个参数省略时，系统默认为&amp;rsquo;\0&amp;rsquo;
//cin.getline(str,5,&amp;lsquo;a&amp;rsquo;);当输入abcdef时输出abcd，输入jkaljkljkl时，输出jk #include&amp;lt;string&amp;gt;
1.getline(cin,string str);//可以接收空格
2.gets(char *str);//可以接收空格
3.getchar()//getchar()是C语言的函数，C++也可以兼容，但是尽量不用或少用；</description>
    </item>
    
    <item>
      <title>clion 代码补全很慢 ( clion code completion slow)  clangd 配置</title>
      <link>https://sucicada.github.io/blog/posts/soft/clion-%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E5%BE%88%E6%85%A2-clion-code-completion-slow-clangd-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/clion-%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E5%BE%88%E6%85%A2-clion-code-completion-slow-clangd-%E9%85%8D%E7%BD%AE/</guid>
      <description>查看官网
https://www.jetbrains.com/help/clion/settings-languages-cpp-clangd.html中 关于code completion 的说明
以下配置开启路径：
File | Settings | Languages and Frameworks | C/C++ | Clangd for Windows and Linux
CLion | Preferences | Languages and Frameworks | C/C++ | Clangd for macOS
我们得知 CLion 提供了两种代码提示引擎一种内置，一种是 Clangd。
默认的选择是只用Clangd，而不会优先用内置引擎。我们选择剩下两个会发现代码提示的速度快了很多。
这个现象能初步判断内置引擎比Clangd要快。至于更深层的原因还待研究。</description>
    </item>
    
    <item>
      <title>DFS的递归实现</title>
      <link>https://sucicada.github.io/blog/posts/soft/dfs%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/dfs%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/</guid>
      <description>对一个例子的理解，以下是关系图的关系矩阵，求从1开始能到哪个数
#include&amp;lt;iostream&amp;gt; #include&amp;lt;queue&amp;gt; # e&amp;lt;cstdio&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; using namespace std; int const N =5; int maze[N][N]={ {0,1,1,0,0}, {0,0,1,0,1}, {0,0,1,0,0}, {1,1,0,0,1}, {0,0,1,0,0} }; int visit[N+1]={0}; //循环的思路： //用递归，一旦有更深的点就产生新的循环，当深的点操作完了，就结束了这个陷得最深的循环。 void dfs1(int start) { visit[start]=1; for(int i=1;i&amp;lt;=N;i++) { if(!visit[i]&amp;amp;&amp;amp;maze[start-1][i-1]==1) { dfs1 (i); } } cout&amp;lt;&amp;lt;start&amp;lt;&amp;lt;&amp;#34; &amp;#34;; } void dfs2(int start) { stack&amp;lt;int&amp;gt;s; s.push(start); visit[start]=1; int iff=0; while(!s.empty()) { iff=0; int v=s.top(); for(int i=1;i&amp;lt;=N;i++) { if(visit[i]==0&amp;amp;&amp;amp;maze[v-1][i-1]==1) { iff=1;//代表if了 visit[i]=1;//第一层 s.push(i); break;//保证当前只走一条路 } } if(iff==0)//到头不if才执行 { cout&amp;lt;&amp;lt;v&amp;lt;&amp;lt;&amp;#34; &amp;#34;; s.</description>
    </item>
    
    <item>
      <title>istringstream、ostringstream、stringstream 类介绍 .</title>
      <link>https://sucicada.github.io/blog/posts/soft/istringstreamostringstreamstringstream-%E7%B1%BB%E4%BB%8B%E7%BB%8D-./</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/istringstreamostringstreamstringstream-%E7%B1%BB%E4%BB%8B%E7%BB%8D-./</guid>
      <description>见以下链接
istringstream、ostringstream、stringstream 类介绍 .
0、C++的输入输出分为三种：
(1)基于控制台的I/O
#include&amp;lt;iostream&amp;gt; (2)基于文件的I/O
#include&amp;lt;fstream&amp;gt; (3)基于字符串的I/O
#include&amp;lt;sstream&amp;gt; str()：使istringstream对象返回一个string字符串
stringstream::clear()//多次使用，先清空此对象的流，不能使用stream.str(&amp;#34;&amp;#34;); //实际上，它并不清空任何内容，它只是重置了流的状态标志而已 ps:但如果你要在程序中用同一个流，反复读写大量的数据，将会造成大量的内存消耗， 这时候，需要适时地清除一下缓冲 (用 stream.str(&amp;quot;&amp;quot;) )。</description>
    </item>
    
    <item>
      <title>js 生成当前日期时间</title>
      <link>https://sucicada.github.io/blog/posts/soft/js-%E7%94%9F%E6%88%90%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/js-%E7%94%9F%E6%88%90%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</guid>
      <description>精简版
var date = new Date(); datetime = date.toLocaleDateString().split(&amp;#39;/&amp;#39;).slice(2,3).concat( date.toLocaleDateString().split(&amp;#39;/&amp;#39;).splice(0,2)).join(&amp;#39;-&amp;#39;) + &amp;#34; &amp;#34; + ( date.toLocaleTimeString().split(&amp;#39; &amp;#39;)[1]==&amp;#39;AM&amp;#39; ? date.toLocaleTimeString().split(&amp;#39; &amp;#39;)[0] : [parseInt(date.toLocaleTimeString().split(&amp;#39; &amp;#39;)[0].split(&amp;#39;:&amp;#39;)[0]) + 12].concat( date.toLocaleTimeString().split(&amp;#39; &amp;#39;)[0].split(&amp;#39;:&amp;#39;).splice(1,3)).join(&amp;#39;:&amp;#39;) ); 人看的版
var date = new Date(); var dd = date.toLocaleDateString().split(&amp;#39;/&amp;#39;); var dd = dd.slice(2,3).concat( dd.splice(0,2)).join(&amp;#39;-&amp;#39;); var time = date.toLocaleTimeString().split(&amp;#39; &amp;#39;); var time = time[1]==&amp;#39;AM&amp;#39; ? time[0] : [parseInt(time[0].split(&amp;#39;:&amp;#39;)[0]) + 12].concat(time[0].split(&amp;#39;:&amp;#39;).splice(1,3)).join(&amp;#39;:&amp;#39;); var datetime = dd + &amp;#34; &amp;#34; + time; </description>
    </item>
    
    <item>
      <title>linux  通过  openconnect  来连接学校内网</title>
      <link>https://sucicada.github.io/blog/posts/soft/linux-%E9%80%9A%E8%BF%87-openconnect-%E6%9D%A5%E8%BF%9E%E6%8E%A5%E5%AD%A6%E6%A0%A1%E5%86%85%E7%BD%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/linux-%E9%80%9A%E8%BF%87-openconnect-%E6%9D%A5%E8%BF%9E%E6%8E%A5%E5%AD%A6%E6%A0%A1%E5%86%85%E7%BD%91/</guid>
      <description>参考
http://xingda1989.iteye.com/blog/1969908
https://blog.csdn.net/edin_blackpoint/article/details/70860101
sudo apt install openconnect
在/etc/vpc/目录下新建vpnc-script 文件
文件内容可以到此处拷贝
http://git.infradead.org/users/dwmw2/vpnc-scripts.git/blob_plain/HEAD:/vpnc-script
sudo openconnect --juniper -u [你的学号] --script /etc/vpnc/vpnc-script [你学校的提供的vpn的url]</description>
    </item>
    
    <item>
      <title>Linux Mint 使用 VNC Server (x11vnc) 进行远程屏幕</title>
      <link>https://sucicada.github.io/blog/posts/soft/linux-mint-%E4%BD%BF%E7%94%A8-vnc-server-x11vnc-%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E5%B1%8F%E5%B9%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/linux-mint-%E4%BD%BF%E7%94%A8-vnc-server-x11vnc-%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E5%B1%8F%E5%B9%95/</guid>
      <description>https://community.linuxmint.com/tutorial/view/2334
This tutorial was adapted from here.
Remove the default Vino server: sudo apt-get -y remove vino
Install x11vnc: sudo apt-get -y install x11vnc
Create the directory for the password file: sudo mkdir /etc/x11vnc
Create the encrypted password file: sudo x11vnc --storepasswd /etc/x11vnc/vncpwd
You will be asked to enter and verify the password. Then press Y to
save the password file.
Create the systemd service file for the x11vnc service: sudo xed /lib/systemd/system/x11vnc.</description>
    </item>
    
    <item>
      <title>linux mint系统 cinnamon桌面 发大镜功能</title>
      <link>https://sucicada.github.io/blog/posts/soft/linux-mint%E7%B3%BB%E7%BB%9F-cinnamon%E6%A1%8C%E9%9D%A2-%E5%8F%91%E5%A4%A7%E9%95%9C%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/linux-mint%E7%B3%BB%E7%BB%9F-cinnamon%E6%A1%8C%E9%9D%A2-%E5%8F%91%E5%A4%A7%E9%95%9C%E5%8A%9F%E8%83%BD/</guid>
      <description>让我来告诉迷途中的你cinnamon桌面一个好用的功能.
选择设置
选择窗口 -&amp;gt; 选择行为
看那个窗口移动和调整大小的特殊键 Alt
好了按住alt在滑动滑轮 世界不一样了
对于小屏幕高分辨率电脑极为友好</description>
    </item>
    
    <item>
      <title>linux remmina 使用rdp协议连接windows显示Failed to startup SSH session:connection refused解决</title>
      <link>https://sucicada.github.io/blog/posts/soft/linux-remmina-%E4%BD%BF%E7%94%A8rdp%E5%8D%8F%E8%AE%AE%E8%BF%9E%E6%8E%A5windows%E6%98%BE%E7%A4%BAfailed-to-startup-ssh-sessionconnection-refused%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/linux-remmina-%E4%BD%BF%E7%94%A8rdp%E5%8D%8F%E8%AE%AE%E8%BF%9E%E6%8E%A5windows%E6%98%BE%E7%A4%BAfailed-to-startup-ssh-sessionconnection-refused%E8%A7%A3%E5%86%B3/</guid>
      <description>https://cn.aliyun.com/jiaocheng/165641.html
删除~/.freerdp/known_hosts
但是我找不见这个文件
尝试删除~/.remmina/remmina.pref 文件 成功</description>
    </item>
    
    <item>
      <title>linux 下安装 Cisco Packet Tracer 7.11以及一些注意(辛酸史)</title>
      <link>https://sucicada.github.io/blog/posts/soft/linux-%E4%B8%8B%E5%AE%89%E8%A3%85-cisco-packet-tracer-7.11%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E8%BE%9B%E9%85%B8%E5%8F%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/linux-%E4%B8%8B%E5%AE%89%E8%A3%85-cisco-packet-tracer-7.11%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E8%BE%9B%E9%85%B8%E5%8F%B2/</guid>
      <description>https://blog.csdn.net/qq_35882901/article/details/77652571
https://linux.cn/article-5576-1.html
开启登录问题
https://blog.csdn.net/u012321131/article/details/78587383
到软件的根目录下 执行以下脚本
sudo ./set_ptenv.sh sudo ./set_qtenv.sh
**一定按步骤走 **
安装在默认的/opt/pt 如果因为安装在家目录而导致闪退 就重新安装在默认路径下
一些依赖库
sudo apt install libqt5scripttools5
sudo apt-get install libqt5multimedia5-plugins
2018/9/18
因为3560的三层交换机的端口信息不显示,忍不了linux的bug,下了6版本的linux版本.
安装失败,
换回7版本,(核心已转储)&amp;hellip;..made?
一个晚上的尝试,发现只是在当前的这个用户下运行不了,&amp;hellip;..放弃了,
那么用wine吧
满心欢喜的安装好了,然后打算慢慢的把7版本的实验在6版本上重打一遍,
但是,cpu占用28,温度81&amp;hellip;&amp;hellip;.耗不起
那么赞颂我们伟大的虚拟机吧
virtualbox的无缝模式太强大了,wine什么的掰掰吧,</description>
    </item>
    
    <item>
      <title>linux 下的torrent下载器qBitTorrent</title>
      <link>https://sucicada.github.io/blog/posts/soft/linux-%E4%B8%8B%E7%9A%84torrent%E4%B8%8B%E8%BD%BD%E5%99%A8qbittorrent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/linux-%E4%B8%8B%E7%9A%84torrent%E4%B8%8B%E8%BD%BD%E5%99%A8qbittorrent/</guid>
      <description>BT下载利器&amp;ndash;Qbittorrent完全攻
Ubuntu使用命令安装qBittorrent的方法
源码下载</description>
    </item>
    
    <item>
      <title>mysql workbench闪退解决办法</title>
      <link>https://sucicada.github.io/blog/posts/soft/mysql-workbench%E9%97%AA%E9%80%80%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/mysql-workbench%E9%97%AA%E9%80%80%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>感谢google，感谢csdn
linux下：
rm -rf .mysql/workbench/
windows下：
删除C:\Users\Administrator\AppData\Roaming\MySQL\Workbench
这个问题没有社区的帮助，我就真的没辙了</description>
    </item>
    
    <item>
      <title>mysql数据库连接以及执行的java类</title>
      <link>https://sucicada.github.io/blog/posts/soft/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E6%89%A7%E8%A1%8C%E7%9A%84java%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E6%89%A7%E8%A1%8C%E7%9A%84java%E7%B1%BB/</guid>
      <description>应该使用json等配置文件来保存要连接的数据库信息,密码等.
先存一下,以后再说
DB_connection.java
/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */ package com; import java.sql.Connection; import java.sql.DriverManager; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; /** * * @author peng */ public class DB_connection { // JDBC 驱动名及数据库 URL String JDBC_DRIVER = &amp;#34;com.mysql.jdbc.Driver&amp;#34;; String DB_URL = &amp;#34;jdbc:mysql://localhost:3306/javabbs?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;#34;; // 数据库的用户名与密码，需要根据自己的设置 String USER = &amp;#34;root&amp;#34;; String PASS = &amp;#34;mysql&amp;#34;; Connection conn = null; // private static DB_connection dB_connection =null; // public static DB_connection getInstance(){ // if(DB_connection == null){ // DB_connection = new DB_connection; // } // return DB_connection; // } public Connection connect(){ try{ Class.</description>
    </item>
    
    <item>
      <title>NYOJ-1204 魔法少女</title>
      <link>https://sucicada.github.io/blog/posts/soft/nyoj-1204-%E9%AD%94%E6%B3%95%E5%B0%91%E5%A5%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/nyoj-1204-%E9%AD%94%E6%B3%95%E5%B0%91%E5%A5%B3/</guid>
      <description>http://nyoj.top/problem/1204
#include&amp;lt;iostream&amp;gt; using namespace std; int h[10006]; int d[10006][2]; // 每一 //int fun(int a,int b){ // if(a&amp;lt;0) // return 0; // if(b==0){ // if(d[a-1][0]&amp;lt;d[a-1][1]){ // cout&amp;lt;&amp;lt;d[a-1][0]&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;a-1&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;0&amp;lt;&amp;lt;endl; // fun(a-1,0); // }else{ // cout&amp;lt;&amp;lt;d[a-1][1]&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;a-1&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;1&amp;lt;&amp;lt;endl; // fun(a-1,1); // } // }else{ // if(d[a-1][0] &amp;lt; d[a-2][0]){ // cout&amp;lt;&amp;lt;d[a-1][0]&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;a-1&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;0&amp;lt;&amp;lt;endl; // fun(a-1,0); // }else{ // cout&amp;lt;&amp;lt;d[a-2][0]&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;a-2&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;0&amp;lt;&amp;lt;endl; // fun(a-2,0); // } // } //} int main(){ int n; while(cin&amp;gt;&amp;gt;n){ for(int i=0;i&amp;lt;n;i++){ cin&amp;gt;&amp;gt;h[i]; } // 0 not // 1 do d[0][0] = h[0]; d[0][1] = 0; d[1][0] = h[1]; d[1][1] = 0; for(int i=2;i&amp;lt;n;i++){ d[i][0] = min(d[i-1][1], d[i-1][0]) + h[i]; d[i][1] = min(d[i-1][0], d[i-2][0]); // 这一层飞了的时间数，和上一层没有飞，以及上上一层没有飞花费的时间数是一样的 } // for(int j=0;j&amp;lt;2;j++){ // for(int i=0;i&amp;lt;n;i++){ // cout&amp;lt;&amp;lt; d[i][j]&amp;lt;&amp;lt;&amp;#34; &amp;#34;; // } // cout&amp;lt;&amp;lt;endl; // } // // if((d[n-1][0]&amp;lt;d[n-1][1])){ // cout&amp;lt;&amp;lt;d[n-1][0]&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;n-1&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;0&amp;lt;&amp;lt;endl; // fun(n-1,0); // }else{ // cout&amp;lt;&amp;lt;d[n-1][1]&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;n-1&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;1&amp;lt;&amp;lt;endl; // fun(n-1,1); // } cout&amp;lt;&amp;lt; min(d[n-1][0],d[n-1][1]) &amp;lt;&amp;lt;endl; } } 伟大的动态规划，我真是愚蠢</description>
    </item>
    
    <item>
      <title>Phaser 引擎 中TiledMap 的 json地图配置文件的格式</title>
      <link>https://sucicada.github.io/blog/posts/soft/phaser-%E5%BC%95%E6%93%8E-%E4%B8%ADtiledmap-%E7%9A%84-json%E5%9C%B0%E5%9B%BE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/phaser-%E5%BC%95%E6%93%8E-%E4%B8%ADtiledmap-%E7%9A%84-json%E5%9C%B0%E5%9B%BE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%BC%E5%BC%8F/</guid>
      <description>官方推荐Tiled 地图编辑器,
https://www.mapeditor.org/
所以查看地图格式直接看Tiled 的官方帮助文档
http://doc.mapeditor.org/en/stable/reference/json-map-format/</description>
    </item>
    
    <item>
      <title>phaser 按键表 keyboard keycode</title>
      <link>https://sucicada.github.io/blog/posts/soft/phaser-%E6%8C%89%E9%94%AE%E8%A1%A8-keyboard-keycode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/phaser-%E6%8C%89%E9%94%AE%E8%A1%A8-keyboard-keycode/</guid>
      <description>https://photonstorm.github.io/phaser-ce/Phaser.KeyCode.html
帮助文档里都有,但就是没人说</description>
    </item>
    
    <item>
      <title>PhaserCE 使用 create.texture 出错  Phaser.Cache.addImage: Image &#34;xx&#34; is not complete 并且图形没有显示</title>
      <link>https://sucicada.github.io/blog/posts/soft/phaserce-%E4%BD%BF%E7%94%A8-create.texture-%E5%87%BA%E9%94%99-phaser.cache.addimage-image-xx-is-not-complete-%E5%B9%B6%E4%B8%94%E5%9B%BE%E5%BD%A2%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/phaserce-%E4%BD%BF%E7%94%A8-create.texture-%E5%87%BA%E9%94%99-phaser.cache.addimage-image-xx-is-not-complete-%E5%B9%B6%E4%B8%94%E5%9B%BE%E5%BD%A2%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA/</guid>
      <description>首先参看官网文档的写法 https://photonstorm.github.io/phaser-ce/Phaser.Create.html#texture
var game = new Phaser.Game(800, 600, Phaser.CANVAS, &amp;#39;game&amp;#39;, { preload: preload, create: create, }); function preload(){ var data = [ &amp;#39; 333 &amp;#39;, &amp;#39; 777 &amp;#39;, &amp;#39;E333E&amp;#39;, &amp;#39; 333 &amp;#39;, &amp;#39; 3 3 &amp;#39;]; game.create.texture(&amp;#39;bob&amp;#39;, data); } function create() { game.add.sprite(0, 0, &amp;#39;bob&amp;#39;); } 控制台警告
Phaser.Cache.addImage: Image &amp;#34;xx&amp;#34; is not complete 改为
...... game.create.texture(&amp;#39;bob&amp;#39;, data,100,10,0,true,function(f){}); ...... 警告
Phaser.Cache.getImage: Key &amp;#34;xx&amp;#34; not found in Cache. 查找资料无果，实验之后发现
使用
game.load.imageFromTexture(&amp;#39;bob&amp;#39;,data,100,1); 替换</description>
    </item>
    
    <item>
      <title>pyhton 下 使用getch(), 输入字符无需回车</title>
      <link>https://sucicada.github.io/blog/posts/soft/pyhton-%E4%B8%8B-%E4%BD%BF%E7%94%A8getch-%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E6%97%A0%E9%9C%80%E5%9B%9E%E8%BD%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/pyhton-%E4%B8%8B-%E4%BD%BF%E7%94%A8getch-%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E6%97%A0%E9%9C%80%E5%9B%9E%E8%BD%A6/</guid>
      <description>#原代码来自
https://code.activestate.com/recipes/134892-getch-like-unbuffered-character-reading-from-stdin/
同时支持windows和unix平台
class _Getch: &amp;#34;&amp;#34;&amp;#34;Gets a single character from standard input. Does not echo to the screen.&amp;#34;&amp;#34;&amp;#34; def __init__(self): try: self.impl = _GetchWindows() except ImportError: self.impl = _GetchUnix() def __call__(self): return self.impl() class _GetchUnix: def __init__(self): import tty, sys def __call__(self): import sys, tty, termios fd = sys.stdin.fileno() old_settings = termios.tcgetattr(fd) try: tty.setraw(sys.stdin.fileno()) ch = sys.stdin.read(1) finally: termios.tcsetattr(fd, termios.TCSADRAIN, old_settings) return ch class _GetchWindows: def __init__(self): import msvcrt def __call__(self): import msvcrt return msvcrt.</description>
    </item>
    
    <item>
      <title>python matplotlibmat 包mplot3d工具   三维视图透视取消</title>
      <link>https://sucicada.github.io/blog/posts/soft/python-matplotlibmat-%E5%8C%85mplot3d%E5%B7%A5%E5%85%B7-%E4%B8%89%E7%BB%B4%E8%A7%86%E5%9B%BE%E9%80%8F%E8%A7%86%E5%8F%96%E6%B6%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/python-matplotlibmat-%E5%8C%85mplot3d%E5%B7%A5%E5%85%B7-%E4%B8%89%E7%BB%B4%E8%A7%86%E5%9B%BE%E9%80%8F%E8%A7%86%E5%8F%96%E6%B6%88/</guid>
      <description>https://stackoverflow.com/questions/23840756/how-to-disable-perspective-in-mplot3d
简单的解决方法是
ax = fig.add_subplot(111, projection=&amp;#39;3d&amp;#39;, proj_type=&amp;#39;ortho&amp;#39;) 注意111 和 proj_type=&amp;lsquo;ortho&amp;rsquo;
辛亏在打算转用Mayavi 前找到了解决方法</description>
    </item>
    
    <item>
      <title>python pip安装不成功 在windows下</title>
      <link>https://sucicada.github.io/blog/posts/soft/python-pip%E5%AE%89%E8%A3%85%E4%B8%8D%E6%88%90%E5%8A%9F-%E5%9C%A8windows%E4%B8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/python-pip%E5%AE%89%E8%A3%85%E4%B8%8D%E6%88%90%E5%8A%9F-%E5%9C%A8windows%E4%B8%8B/</guid>
      <description>我用的是windows。你可以试试以管理员模式运行终端。
我在用python安装第三方库时，使用如下方式
pip install xxxx.whl 但是无论如何都只显示到
Installing collected packages: xxxx
然后就没了，和网上说的出来什么success提示完全不，然后我通过import来验证，也是没有安装上的。
一定要出现
Successful installed xxxx
才算成功。
如果你的问题不是这样的，请查查看别的家的博客。
花了一个晚上都没有安上pygame。
于是第二天在整整一个下午琢磨了两个小时为什么。重启电脑，将python卸载再安装，卸载再安装，卸载再安装。删除easy_install 重装ez。删除pip，重装pip。重装wheel，但是如上面那样也失败了。然后我终于发现问题所在了。
我把powershell当成了是默认的管理员模式，于是我就一直处于安装不成功的地步。
所以说，如果你也安装不上，试试管理员模式运行终端。
真的是气，那些三步安装库的人根本不说。</description>
    </item>
    
    <item>
      <title>python Tkinter 的 Text 保持焦点在行尾</title>
      <link>https://sucicada.github.io/blog/posts/soft/python-tkinter-%E7%9A%84-text-%E4%BF%9D%E6%8C%81%E7%84%A6%E7%82%B9%E5%9C%A8%E8%A1%8C%E5%B0%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/python-tkinter-%E7%9A%84-text-%E4%BF%9D%E6%8C%81%E7%84%A6%E7%82%B9%E5%9C%A8%E8%A1%8C%E5%B0%BE/</guid>
      <description>https://bbs.csdn.net/topics/390712532
text.see(END)</description>
    </item>
    
    <item>
      <title>Python3 urllib 爬取 花瓣网图片</title>
      <link>https://sucicada.github.io/blog/posts/soft/python3-urllib-%E7%88%AC%E5%8F%96-%E8%8A%B1%E7%93%A3%E7%BD%91%E5%9B%BE%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/python3-urllib-%E7%88%AC%E5%8F%96-%E8%8A%B1%E7%93%A3%E7%BD%91%E5%9B%BE%E7%89%87/</guid>
      <description>点我去我的github上看源码
**花瓣网是动态的,所以要抓包分析,,但我真的累的不行,不想写教程了,我源码里有注释</description>
    </item>
    
    <item>
      <title>python3 urllib爬取wallhalla网站图片</title>
      <link>https://sucicada.github.io/blog/posts/soft/python3-urllib%E7%88%AC%E5%8F%96wallhalla%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/python3-urllib%E7%88%AC%E5%8F%96wallhalla%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87/</guid>
      <description>点我去我的github上看源码
简单使用静态方法爬取https://wallhalla.com/网站的图片
参考:
https://blog.csdn.net/cquptcmj/article/details/53526137
https://www.cnblogs.com/zhouxuchen/p/4341034.html</description>
    </item>
    
    <item>
      <title>python3.5  安装twisted</title>
      <link>https://sucicada.github.io/blog/posts/soft/python3.5-%E5%AE%89%E8%A3%85twisted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/python3.5-%E5%AE%89%E8%A3%85twisted/</guid>
      <description>https://blog.csdn.net/caimouse/article/details/77647952
下载地址：http://www.lfd.uci.edu/~gohlke/pythonlibs/
下载到文件：Twisted-18.7.0-cp35-cp35m-win_amd64.whl
然后安装：pip install Twisted-18.7.0-cp35-cp35m-win_amd64.whl
如果不行 下载win32版本试试
如果不行
提示Python.h: No such file or directory compilation terminated.
那么就 sudo apt-get install python-dev
然后试试 上面步骤
如果还不行
sudo pip3 install twisted</description>
    </item>
    
    <item>
      <title>sublime 自定义主题(linux版)</title>
      <link>https://sucicada.github.io/blog/posts/soft/sublime-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98linux%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/sublime-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98linux%E7%89%88/</guid>
      <description>先ctrl+`安装packa：
import urllib.request,os; pf = &amp;lsquo;Package Control.sublime-package&amp;rsquo;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &amp;lsquo;wb&amp;rsquo;).write(urllib.request.urlopen( &amp;lsquo;http://sublime.wbond.net/&#39; + pf.replace(&amp;rsquo; &amp;lsquo;,&amp;rsquo;%20&amp;rsquo;)).read())
使用快捷键ctrl+shift+p，输入packet control install package
这个网站上可以自制主题
http://tmtheme-editor.herokuapp.com/#!/editor/local/undefined
之后将文件放到home/peng/.config/sublime-text-3/Packages
从preferences里的theme选项可以换了</description>
    </item>
    
    <item>
      <title>ubuntu 18.04 使用 Docker 安装 kiwenlau版Hadoop</title>
      <link>https://sucicada.github.io/blog/posts/soft/ubuntu-18.04-%E4%BD%BF%E7%94%A8-docker-%E5%AE%89%E8%A3%85-kiwenlau%E7%89%88hadoop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/ubuntu-18.04-%E4%BD%BF%E7%94%A8-docker-%E5%AE%89%E8%A3%85-kiwenlau%E7%89%88hadoop/</guid>
      <description>1. docker 安装 参考
sudo apt-get update sudo dpkg --configure -a sudo apt-get install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;#34; sudo apt-get update sudo apt-get install docker-ce 1.5 docker换源（可选） 参考
2. docker验证 docker --version sudo docker run hello-world 3. docker非root使用 参考
sudo usermod -aG docker $USER sudo service docker restart newgrp docker 4. hadoop的docker image 参考：基于Docker搭建Hadoop集群之升级版</description>
    </item>
    
    <item>
      <title>virtualbox 发送 ctrl alt fn组合键的方法：使用热键（默认右ctrl）&#43;fn即可</title>
      <link>https://sucicada.github.io/blog/posts/soft/virtualbox-%E5%8F%91%E9%80%81-ctrl-alt-fn%E7%BB%84%E5%90%88%E9%94%AE%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E7%83%AD%E9%94%AE%E9%BB%98%E8%AE%A4%E5%8F%B3ctrl&#43;fn%E5%8D%B3%E5%8F%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/virtualbox-%E5%8F%91%E9%80%81-ctrl-alt-fn%E7%BB%84%E5%90%88%E9%94%AE%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E7%83%AD%E9%94%AE%E9%BB%98%E8%AE%A4%E5%8F%B3ctrl&#43;fn%E5%8D%B3%E5%8F%AF/</guid>
      <description>一般是用来在虚拟机中切换文字模式和图像化窗口模式的。
如果直接使用ctrl+alt+fn可能会触发主机的组合键。
所以使用热键+fn</description>
    </item>
    
    <item>
      <title>Visual Stdio Code 运行生成任务  输出不了</title>
      <link>https://sucicada.github.io/blog/posts/soft/visual-stdio-code-%E8%BF%90%E8%A1%8C%E7%94%9F%E6%88%90%E4%BB%BB%E5%8A%A1-%E8%BE%93%E5%87%BA%E4%B8%8D%E4%BA%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/visual-stdio-code-%E8%BF%90%E8%A1%8C%E7%94%9F%E6%88%90%E4%BB%BB%E5%8A%A1-%E8%BE%93%E5%87%BA%E4%B8%8D%E4%BA%86/</guid>
      <description>刚刚解决了pip安装的问题，现在打开vscode又出现了问题。
我像平常一样按下ctrl+shift+B 运行我的python文件
但是结果就像我用vc写C语言一样，闪过一个黑窗口的终端界面，然后就没了。没有输出，控制台界面也没有停下来让我好好看看。
我查了查，没有结果。
然后灵机一动，我知道怎么回事了。都怪我手贱，将python.exe这个文件设置成了默认管理员模式运行。
我不知道为什么，反正我取消了管理员模式运行就好了。</description>
    </item>
    
    <item>
      <title>windows 一键切换ip dns脚本</title>
      <link>https://sucicada.github.io/blog/posts/soft/windows-%E4%B8%80%E9%94%AE%E5%88%87%E6%8D%A2ip-dns%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/windows-%E4%B8%80%E9%94%AE%E5%88%87%E6%8D%A2ip-dns%E8%84%9A%E6%9C%AC/</guid>
      <description>下载bat脚本
https://github.com/SuCicada/ipswitch
然后运行,按照提示输入即可
@echo off&amp;amp;color 1E&amp;amp;title IP地址快速切换器 echo ┌────────────────────────────┐ echo ｜ ｜ echo ｜ 切换网络环境，请输入当前所在位置 │ echo ｜ ｜ echo └────────────────────────────┘ &amp;gt;nul 2&amp;gt;&amp;amp;1 &amp;#34;%SYSTEMROOT%\system32\cacls.exe&amp;#34; &amp;#34;%SYSTEMROOT%\system32\config\system&amp;#34; :choice set choice= set /p choice=【外网】请选择1，【内网】请选择2 :[1,2]? if %choice%==2 goto school_lan if %choice%==1 (goto lab_lan) else (echo 输入错误，请重新输入&amp;amp;goto choice) :lab_lan set eth=&amp;#34;本地连接&amp;#34; set ip=10.0.0. set netmask=255.255.255.0 set gw=10.0.0.1 set dns1=8.8.8.8 set dns2= echo. echo 切换到外网有线环境 echo. goto switch :school_lan set eth=&amp;#34;本地连接&amp;#34; set ip=10.90.6. set netmask=255.255.255.0 set gw=10.</description>
    </item>
    
    <item>
      <title>WSL2 -- Windows10 环境中运行 Linux （无缝衔接，开发利器）</title>
      <link>https://sucicada.github.io/blog/posts/soft/wsl2--windows10-%E7%8E%AF%E5%A2%83%E4%B8%AD%E8%BF%90%E8%A1%8C-linux-%E6%97%A0%E7%BC%9D%E8%A1%94%E6%8E%A5%E5%BC%80%E5%8F%91%E5%88%A9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/wsl2--windows10-%E7%8E%AF%E5%A2%83%E4%B8%AD%E8%BF%90%E8%A1%8C-linux-%E6%97%A0%E7%BC%9D%E8%A1%94%E6%8E%A5%E5%BC%80%E5%8F%91%E5%88%A9%E5%99%A8/</guid>
      <description>WSL2 是什么 全称为 Windows Subsystem for Linux2。是一个能在Windows上运行Linux运行环境的工具。是WSL的第二代。
简单来说就是Windows下的Linux虚拟机。
比虚拟机好在哪里 启动速度超快。文件访问跨系统访问无限制（因为两个系统之间的目录是通过网络映射挂载的） Windows、Linux 命令混合使用。无论在哪个系统的终端，都可以使用另一个系统的命令。（比如在Linux中使用explorer.exe . 看看会发生什么） 比WSL1好在哪 最主要体现在网络隔离、以及进程管理（比如ps）。
WSL2使用类似NAT的虚拟机网络模式。这样的好处就是Linux和Windows的网段是隔离的。
而WSL1更像是运行在Windows上的一个程序，所以网络IP、端口、进程状态等都是用的Windows宿主机。
所以这么来看WSL2更像是纯粹的一个虚拟机了。
安装&amp;amp;配置 在 Windows 中运行 Linux：WSL 2 使用入门
適用於Linux的Windows子系統(Windows Subsystem for Linux；WSL)
进阶提升效率 Windows Terminal
比PowerShell 更好用、更美观的Windows终端。支持窗口多开，WSL直开。
玩转WSL(2)之安装并配置Windows Terminal
Ctrl+Alt+T 开启终端。
下载WinHotKey，设置Windows Terminal默认窗口为WSL。
体验原生Linux终端的快感。
肯定有用的脚本 todo 衍生资源 WSL 和 WSL2 简单对比</description>
    </item>
    
    <item>
      <title>三柱体hanoi问题（C_C&#43;&#43;语言版）</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E4%B8%89%E6%9F%B1%E4%BD%93hanoi%E9%97%AE%E9%A2%98c_c&#43;&#43;%E8%AF%AD%E8%A8%80%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E4%B8%89%E6%9F%B1%E4%BD%93hanoi%E9%97%AE%E9%A2%98c_c&#43;&#43;%E8%AF%AD%E8%A8%80%E7%89%88/</guid>
      <description>控制台运行输入数据格式 ： xxx（程序名） 3（汉诺塔层数）
会显示出每一步的移动步骤，以及每一柱上留有的盘数
#include&amp;lt;iostream&amp;gt; #include&amp;lt;sstream&amp;gt; using namespace std; int a=0,b=0,c=0; void hno(int n,char from,char mid,char to) { if(n&amp;gt;1) { hno(n-1,from,to,mid); hno(1,from,mid,to); hno(n-1,mid,from,to); } else { switch(from) { case &amp;#39;A&amp;#39;:a--;break; case &amp;#39;B&amp;#39;:b--;break; case &amp;#39;C&amp;#39;:c--;break; } switch(to) { case &amp;#39;A&amp;#39;:a++;break; case &amp;#39;B&amp;#39;:b++;break; case &amp;#39;C&amp;#39;:c++;break; } cout&amp;lt;&amp;lt;from&amp;lt;&amp;lt;&amp;#34;--&amp;gt;&amp;#34;&amp;lt;&amp;lt;to&amp;lt;&amp;lt;&amp;#34; A:&amp;#34;&amp;lt;&amp;lt;a&amp;lt;&amp;lt;&amp;#34; B:&amp;#34;&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&amp;#34; C:&amp;#34;&amp;lt;&amp;lt;c&amp;lt;&amp;lt;endl; } } int main(int argc,char *argv[]) { // cout&amp;lt;&amp;lt;argc&amp;lt;&amp;lt;endl; // cout&amp;lt;&amp;lt;&amp;#34;_&amp;#34;&amp;lt;&amp;lt;argv[1]&amp;lt;&amp;lt;&amp;#34;_&amp;#34;&amp;lt;&amp;lt;endl; // return 0; stringstream s; int n;//=*argv[1]; s&amp;lt;&amp;lt;argv[1]; s&amp;gt;&amp;gt;n; //cin&amp;gt;&amp;gt;n; a=n; //hno(n,) hno(n,&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;C&amp;#39;); return 0; } </description>
    </item>
    
    <item>
      <title>三柱汉诺塔问题（Python版）</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E4%B8%89%E6%9F%B1%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98python%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E4%B8%89%E6%9F%B1%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98python%E7%89%88/</guid>
      <description>思路一样
def move(n, a, b, c): if(n&amp;gt;1): move(n-1,a,c,b) move(1,a,b,c) move(n-1,b,a,c) else: print a,&amp;#39;--&amp;gt;&amp;#39;,c n = input(&amp;#39;input a number&amp;#39;) #int(raw_input()) move(n, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;) </description>
    </item>
    
    <item>
      <title>修改 linux、ubuntu 默认终端，外加terminator颜色方案</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E4%BF%AE%E6%94%B9-linuxubuntu-%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E5%A4%96%E5%8A%A0terminator%E9%A2%9C%E8%89%B2%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E4%BF%AE%E6%94%B9-linuxubuntu-%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E5%A4%96%E5%8A%A0terminator%E9%A2%9C%E8%89%B2%E6%96%B9%E6%A1%88/</guid>
      <description>需求：使用 cinnamon 桌面，想要修改右键打开的终端为terminator
先安装 dconf-tools
sudo apt-get install dconf-tools 依次进入
org -&amp;gt; cinnamon -&amp;gt; desktop -&amp;gt; default-applications -&amp;gt; terminal
然后将键值改成你想要的
比如terminator为
key value exec: x-terminal-emulator exec-arg: -e 最后来一个一键脚本
gsettings set org.gnome.desktop.default-applications.terminal exec /usr/bin/x-terminal-emulator gsettings set org.gnome.desktop.default-applications.terminal exec-arg &amp;#34;-e&amp;#34; terminator颜色方案
配置文件 ~/.config/terminator/config
[global_config] always_split_with_profile = True enabled_plugins = LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler focus = system geometry_hinting = False handle_size = 2 inactive_color_offset = 1.0 title_font = mry_KacstQurn Bold 11 title_hide_sizetext = True title_receive_bg_color = &amp;#34;#729fcf&amp;#34; [keybindings] paste = &amp;lt;Primary&amp;gt;v [layouts] [[default]] [[[child1]]] parent = window0 profile = default type = Terminal [[[window0]]] parent = &amp;#34;&amp;#34; type = Window [plugins] [profiles] [[default]] background_color = &amp;#34;#3e3535&amp;#34; background_darkness = 0.</description>
    </item>
    
    <item>
      <title>关于 1.0_0.0 以及 0.0_0.0 的值</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8E-1.0_0.0-%E4%BB%A5%E5%8F%8A-0.0_0.0-%E7%9A%84%E5%80%BC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8E-1.0_0.0-%E4%BB%A5%E5%8F%8A-0.0_0.0-%E7%9A%84%E5%80%BC/</guid>
      <description>#include&amp;lt;cstdio&amp;gt; #include&amp;lt;iostream&amp;gt; using namespace std; int main() { printf(&amp;#34;%d\n&amp;#34;,1.0/0.0);//0 printf(&amp;#34;%d\n&amp;#34;,0.0/0.0);//0 printf(&amp;#34;%lld\n&amp;#34;,1.0/0.0);//9218868437227405312 printf(&amp;#34;%lld\n&amp;#34;,0.0/0.0);//-2251799813685248 printf(&amp;#34;%lf\n&amp;#34;,1.0/0.0);//1.#INF00 printf(&amp;#34;%lf\n&amp;#34;,0.0/0.0);//-1.#INF00 cout&amp;lt;&amp;lt;1.0/0.0&amp;lt;&amp;lt;endl;//inf cout&amp;lt;&amp;lt;0.0/0.0&amp;lt;&amp;lt;endl;//nan return 0; } </description>
    </item>
    
    <item>
      <title>关于linux 下pycharm 输入法不跟随的问题(未解决)</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8Elinux-%E4%B8%8Bpycharm-%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%8D%E8%B7%9F%E9%9A%8F%E7%9A%84%E9%97%AE%E9%A2%98%E6%9C%AA%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8Elinux-%E4%B8%8Bpycharm-%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%8D%E8%B7%9F%E9%9A%8F%E7%9A%84%E9%97%AE%E9%A2%98%E6%9C%AA%E8%A7%A3%E5%86%B3/</guid>
      <description>http://tieba.baidu.com/p/3858968877#70635782254l
https://neue.v2ex.com/t/306947
貌似linux无解</description>
    </item>
    
    <item>
      <title>关于linux上运行ONS</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8Elinux%E4%B8%8A%E8%BF%90%E8%A1%8Cons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8Elinux%E4%B8%8A%E8%BF%90%E8%A1%8Cons/</guid>
      <description>https://tieba.baidu.com/p/5202079866?pv=1
用ONScripter
安装依赖库 sudo apt-get install libsdl1.2debian libsdl-sound1.2 libsdl-ttf2.0-0 libsdl-mixer1.2 libsdl-image1.2 libasound2 libjpeg62 libpng12-0 libvorbisfile3 libsmpeg0 libavifile-0.7c2 libbz2-1.0 libogg0</description>
    </item>
    
    <item>
      <title>关于ssh scp 不用交互式 即自动或者带密码执行</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8Essh-scp-%E4%B8%8D%E7%94%A8%E4%BA%A4%E4%BA%92%E5%BC%8F-%E5%8D%B3%E8%87%AA%E5%8A%A8%E6%88%96%E8%80%85%E5%B8%A6%E5%AF%86%E7%A0%81%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8Essh-scp-%E4%B8%8D%E7%94%A8%E4%BA%A4%E4%BA%92%E5%BC%8F-%E5%8D%B3%E8%87%AA%E5%8A%A8%E6%88%96%E8%80%85%E5%B8%A6%E5%AF%86%E7%A0%81%E6%89%A7%E8%A1%8C/</guid>
      <description>sshpass方式
expect方式
第一种方式 通过 sshpass 来 sshpass -p &amp;#34;xxxx&amp;#34; ssh root@xxx.xx.xxx sshpass -p &amp;#34;xxxx&amp;#34; scp xxxx root@xxxx:/xxxxx 但是sshpass好像不能回显. 对于scp不太方便
但是对于ssh确实很好用的
第二种方式 通过expect
用法参考 比如使用ssh
#!/usr/bin/expect set timeout 30 spawn ssh root@sucicada.tk expect &amp;#34;password:&amp;#34; send &amp;#34;Ubuntu2019\n&amp;#34; interact 通过以上方式可以使用一个脚本就能登录到远程主机上了</description>
    </item>
    
    <item>
      <title>关于辗转相除</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8E%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8E%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4/</guid>
      <description>#include&amp;lt;iostream&amp;gt; using namespace std; int gcd(int a,int b,int&amp;amp; x,int &amp;amp;y){ if(b==0){ x = 1; y = 0; return a; } int q = gcd(b, a%b, y, x); // y 是给b用的 // a 是大的那个 y = (q-a*x)/b; cout&amp;lt;&amp;lt;a&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;x&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;y&amp;lt;&amp;lt;endl; return q; } int main(){ int x,y; int a=12; int b=32; gcd(a,b,x,y); } 这就是我这个菜鸡的代码备份，草我特么咋就这么笨</description>
    </item>
    
    <item>
      <title>关于阿里云的一些配置：</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%85%B3%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/</guid>
      <description>先apt update 更新
作为
安装 nginx 反向代理服务器</description>
    </item>
    
    <item>
      <title>刘汝佳p35,2-5（分数化小数）算法竞赛入门经典第二版</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p352-5%E5%88%86%E6%95%B0%E5%8C%96%E5%B0%8F%E6%95%B0%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p352-5%E5%88%86%E6%95%B0%E5%8C%96%E5%B0%8F%E6%95%B0%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</guid>
      <description>输入a，b，c，输出a/b的小数形式，精确到小数点后c位，a,b&amp;lt;=10^6,c&amp;lt;=100，以a=b=c=0结束，四舍五入
#include&amp;lt;stdio.h&amp;gt; int main() { int a,b,c,n=1; while(scanf(&amp;#34;%d%d%d&amp;#34;,&amp;amp;a,&amp;amp;b,&amp;amp;c)&amp;amp;&amp;amp;(a||b||c)) { printf(&amp;#34;Case %d: %d.&amp;#34;,n++,a/b);//整数位和小数点 for(int i=0;i&amp;lt;c-1;i++) { printf(&amp;#34;%d&amp;#34;,(a*10/b)%10); a=(a*10)%b;//为了不让a溢出，用a/b的余数来算并不影响结果 } printf(&amp;#34;%d\n&amp;#34;,((a*100/b)%100+5)/10);//最后一位四舍五入 } return 0; } 已经连这种简单的算法都要上网看别人写的了，自己想出来的都是错的，浪费了一个小时又。</description>
    </item>
    
    <item>
      <title>刘汝佳p35,2-6（123排列）算法竞赛入门经典第二版</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p352-6123%E6%8E%92%E5%88%97%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p352-6123%E6%8E%92%E5%88%97%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</guid>
      <description>算法竞赛入门经典第二版
刘汝佳p35 , 2-6
用1,2,3，&amp;hellip;.，9组成3个三位数abc，def和ghi，每个数字恰好使用一次，要求abc:def:ghi=1:2:3。输出所有解。
#include&amp;lt;cstdio&amp;gt; #include&amp;lt;iostream&amp;gt; using namespace std; int nn(int a,int *n) { //cout&amp;lt;&amp;lt;&amp;#34;a&amp;#34;&amp;lt;&amp;lt;a&amp;lt;&amp;lt;endl; for(int i=0;i&amp;lt;8;i++) { if(a==n[i]) { //cout&amp;lt;&amp;lt;n[i]&amp;lt;&amp;lt;endl; n[i]=-1; return 0; } } return 1; } void num(int a) { int n[9]; for(int i=0;i&amp;lt;8;i++) n[i]=i+1; int b=a*2; int c=a*3; int s[9]; s[0]=a/100; s[1]=(a/10)%10; s[2]=a%10; s[3]=b/100; s[4]=(b/10)%10; s[5]=b%10; s[6]=c/100; s[7]=(c/10)%10; s[8]=c%10; for(int i=0;i&amp;lt;8;i++) { //cout&amp;lt;&amp;lt;&amp;#34;si&amp;#34;&amp;lt;&amp;lt;s[i]&amp;lt;&amp;lt;endl; if(nn(s[i],n)==1) { //cout&amp;lt;&amp;lt;&amp;#34;return&amp;#34;&amp;lt;&amp;lt;endl; return; } } cout&amp;lt;&amp;lt;a&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;c&amp;lt;&amp;lt;endl; } int main() { for(int a=100;a&amp;lt;=333;a++) { num(a); } return 0; } 所以结果是</description>
    </item>
    
    <item>
      <title>刘汝佳p39,3-2（开灯问题）算法竞赛入门经典第二版</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p393-2%E5%BC%80%E7%81%AF%E9%97%AE%E9%A2%98%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p393-2%E5%BC%80%E7%81%AF%E9%97%AE%E9%A2%98%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</guid>
      <description>有n盏灯，编号为1～n，第1个人把所有灯打开，第2个人按下所有编号为2的倍数的开关（这些灯将被关掉），第3个人按下所有编号为3的倍数的开关（其中关掉的灯被打开， 开着灯将被关闭），依此类推。一共有k个人，问最后有哪些灯开着？
输入：n和k，输出开着的灯编号。k≤n≤1000。
样例输入：7 3
样例输出：1 5 6 7
（题目描述拷贝自http://blog.csdn.net/oceaniwater/article/details/40709609）
#include&amp;lt;stdio.h&amp;gt; int main() { int n,k,ni,ki,nii; //n=7;k=3; scanf(&amp;#34;%d%d&amp;#34;,&amp;amp;n,&amp;amp;k); for(ni=1;ni&amp;lt;=n;ni++)//灯数 { nii=ni; for(ki=1;ki&amp;lt;=k;ki++)//每灯人数 { //printf(&amp;#34;%%%d &amp;#34;,nii%ki); if(nii%ki==0)//当前灯是否为当前人的倍数 { ni*=(-1);//负数为开，正数为灭 } //printf(&amp;#34;!%d\n&amp;#34;,ni); } if(ni&amp;lt;0) { printf(&amp;#34;%d &amp;#34;,ni*=-1); } } return 0; } </description>
    </item>
    
    <item>
      <title>刘汝佳p39,3-3（蛇形填数）算法竞赛入门经典第二版</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p393-3%E8%9B%87%E5%BD%A2%E5%A1%AB%E6%95%B0%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p393-3%E8%9B%87%E5%BD%A2%E5%A1%AB%E6%95%B0%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</guid>
      <description>在nn方阵里填入1,2,„,nn，要求填成蛇形。例如n=4时方阵为
10 11 12 1
9 16 13 2
8 15 14 3
7 6 5 4
上面的方阵中，多余的空格只是为了便于观察规律，不必严格输出。n≤8。
#include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; using namespace std; int const N=120; int main() { int n[N][N]={0}; int m,mm; cin&amp;gt;&amp;gt;m; mm=m; int s=1,i,j; //s=n[i=0][j=m-1]=1; while(m--) { //m--; i=mm-m-1; j=m; while(i&amp;lt;=m-1 &amp;amp;&amp;amp;n[i][j]==0) n[i++][j]=s++;//right while(j&amp;gt;=mm-m &amp;amp;&amp;amp;n[i][j]==0) n[i][j--]=s++;//down while(i&amp;gt;=mm-m &amp;amp;&amp;amp;n[i][j]==0) n[i--][j]=s++;//left while(j&amp;lt;=m-1 &amp;amp;&amp;amp;n[i][j]==0) n[i][j++]=s++;//up if(s==mm*mm)n[i+1][j-1]=s; } for(i=0;i&amp;lt;mm;i++) { for(j=0;j&amp;lt;mm;j++) cout&amp;lt;&amp;lt;setw(3)&amp;lt;&amp;lt;n[i][j]; cout&amp;lt;&amp;lt;endl; } return 0; } </description>
    </item>
    
    <item>
      <title>刘汝佳p41,3-4（竖式问题）算法竞赛入门经典第二版</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p413-4%E7%AB%96%E5%BC%8F%E9%97%AE%E9%A2%98%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%88%98%E6%B1%9D%E4%BD%B3p413-4%E7%AB%96%E5%BC%8F%E9%97%AE%E9%A2%98%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%E7%AC%AC%E4%BA%8C%E7%89%88/</guid>
      <description> 题目：
找出所有形如abc*de（三位数乘以两位数）的算式，使得在完整的竖式中，所有数字都属于一个特定的数字集合。输入数字集合（相邻数字之间没有空格），输出所有竖式。每个竖式前应有编号，之后应有一个空行。最后输出解的总数。具体格式见样例输出（为了便于观察，竖式中的空格改用小数点显示，但你的程序应该输出空格，而非小数点）。
样例输入：2357
样例输出：
&amp;lt;1&amp;gt;
..775
X..33
.&amp;mdash;&amp;ndash;
.2325
.&amp;mdash;&amp;ndash;
25575
The number of solutions = 1
分析：
尝试所有的abc和de，判断是否满足条件。
#include&amp;lt;iostream&amp;gt; #include&amp;lt;string.h&amp;gt; #include&amp;lt;cstdio&amp;gt; using namespace std; int main() { char s[15],f[25]; int n=1; cin&amp;gt;&amp;gt;s; for(int a=100;a&amp;lt;1000;a++) { for(int b=10;b&amp;lt;=99;b++) { int o=1; int x=a*(b%10),y=a*(b/10),z=a*b; sprintf(f,&amp;#34;%d%d%d%d%d&amp;#34;,a,b,x,y,z);//将abxyz输入到f中 for(int i=0;i&amp;lt;strlen(f);i++) if(strchr(s,f[i])==NULL) o=0; if(o) printf(&amp;#34;&amp;lt;%d&amp;gt;\n%5d\nX%4d\n-----\n%5d\n%4d \n-----\n%5d\n\n&amp;#34;,n++,a,b,x,y,z); } } cout&amp;lt;&amp;lt;&amp;#34;The number of solutions = &amp;#34;&amp;lt;&amp;lt;n-1&amp;lt;&amp;lt;endl; return 0; } </description>
    </item>
    
    <item>
      <title>判断字符是否为字母或数字</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AD%97%E6%AF%8D%E6%88%96%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AD%97%E6%AF%8D%E6%88%96%E6%95%B0%E5%AD%97/</guid>
      <description>参考：
C语言中isalnum()函数和isalpha()函数的对比使用
C语言 判断字符的大小写 isalpha()函数
#include&amp;lt;ctype.h&amp;gt;//或&amp;lt;cctype&amp;gt; int isalpha(int ch)//为英文字母时返回不一定为1的非零，否则返回零 isalnum(c)//判断c是否为英文字母或数字 isupper(c)//判断c是否为大写英文字母 islower(c)//判断c是否为小写英文字母 isdigit(c)//判断c是否为数字 以上若不是所判断字符类型则都返回零</description>
    </item>
    
    <item>
      <title>十六进制转十进制.h</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6.h/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6.h/</guid>
      <description>#include&amp;lt;stdio.h&amp;gt; #include&amp;lt;ctype.h&amp;gt; int sc(char a[])//传进来代表十六进制的字符串数组，返回十进制 { int i,n=0,t; for(i=0;a[i];i++) { a[i]=toupper(a[i]); if(a[i]&amp;gt;=&amp;#39;A&amp;#39;) t=a[i]-&amp;#39;A&amp;#39;+10; else t=a[i]-&amp;#39;0&amp;#39;; n=n*16+t; } return n; } </description>
    </item>
    
    <item>
      <title>啊</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%95%8A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%95%8A/</guid>
      <description>Flume 的 发起：
org.apache.flume.node.Application
我们看最后这里
application.start(); final Application appReference = application; Runtime.getRuntime().addShutdownHook(new Thread(&amp;#34;agent-shutdown-hook&amp;#34;) { @Override public void run() { appReference.stop(); } }); </description>
    </item>
    
    <item>
      <title>在Linux Mint 19 _ Linux Mint 18上安装VirtualBox 6.0 _ 5.2</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%9C%A8linux-mint-19-_-linux-mint-18%E4%B8%8A%E5%AE%89%E8%A3%85virtualbox-6.0-_-5.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%9C%A8linux-mint-19-_-linux-mint-18%E4%B8%8A%E5%AE%89%E8%A3%85virtualbox-6.0-_-5.2/</guid>
      <description>如果你直接可以
sudo apt-get install virtualbox-6.0那就相安无事
否则参考
https://www.itzgeek.com/how-tos/linux/linux-mint-how-tos/install-virtualbox-4-3-on-linux-mint-17.html
打开终端并将Oracle VirtualBox存储库的公钥导入您的系统。
wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
使用以下命令添加VirtualBox存储库。
### Linux Mint 19 ###
echo“deb [arch = amd64] http://download.virtualbox.org/virtualbox/debian bionic contrib”| sudo tee /etc/apt/sources.list.d/virtualbox.list
### Linux Mint 18 ###
echo“deb http://download.virtualbox.org/virtualbox/debian xenial contrib”| sudo tee /etc/apt/sources.list.d/virtualbox.list
更新存储库索引数据库。
sudo apt-get update
使用apt命令安装VirtualBox。
VirtualBox 6.0：
sudo apt-get install -y virtualbox-6.0
VirtualBox 5.2：
sudo apt-get install -y virtualbox-5.2
经历:
先参看官网方法:https://www.virtualbox.org/wiki/Linux_Downloads
deb https://download.virtualbox.org/virtualbox/debian &amp;lt;mydist&amp;gt; contrib 增加源, &amp;lt;mydist&amp;gt; 里添加ubuntu的发行版 使用</description>
    </item>
    
    <item>
      <title>在树莓派 raspberrypi 系统中 安装rar unrar解压</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE-raspberrypi-%E7%B3%BB%E7%BB%9F%E4%B8%AD-%E5%AE%89%E8%A3%85rar-unrar%E8%A7%A3%E5%8E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE-raspberrypi-%E7%B3%BB%E7%BB%9F%E4%B8%AD-%E5%AE%89%E8%A3%85rar-unrar%E8%A7%A3%E5%8E%8B/</guid>
      <description>参考
https://raspberrypi.stackexchange.com/questions/3617/how-to-install-unrar-nonfree
1.卸载unrar-free。
$ sudo apt-get remove unrar-free
2.通过编辑确保您拥有源存储库/etc/apt/sources.list。
$ cat /etc/apt/sources.list
# Default repository
deb http://archive.raspbian.org/raspbian wheezy main contrib non-free rpi
# Source repository to add
deb-src http://archive.raspbian.org/raspbian wheezy main contrib non-free rpi
3.同步apt数据库。
$ sudo apt-get update
4.创建一个工作目录并移入其中。该unrar-nonfree命令将在此目录中构建。
$ cd $(mktemp -d)
5.安装所需的依赖项unrar-nonfree。
$ sudo apt-get build-dep unrar-nonfree
6.下载unrar-nonfree源代码并构建.deb软件包。
$ sudo apt-get source -b unrar-nonfree
7.安装生成的.deb包。它的名称取决于版本unrar-nonfree。
$ sudo dpkg -i unrar*.deb
如果第六步报错如下:
dpkg-buildpackage: info: binary-only upload (no source included) W: 由于文件&amp;#39;unrar-nonfree_5.</description>
    </item>
    
    <item>
      <title>如何在 ClassPathXmlApplicationContext 里使用相对类路径的 xml文件</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E5%A6%82%E4%BD%95%E5%9C%A8-classpathxmlapplicationcontext-%E9%87%8C%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E7%B1%BB%E8%B7%AF%E5%BE%84%E7%9A%84-xml%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E5%A6%82%E4%BD%95%E5%9C%A8-classpathxmlapplicationcontext-%E9%87%8C%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E7%B1%BB%E8%B7%AF%E5%BE%84%E7%9A%84-xml%E6%96%87%E4%BB%B6/</guid>
      <description>参考https://blog.csdn.net/upxiaofeng/article/details/53332226
URL a = this.getClass().getResource(&amp;#34;&amp;#34;); // 获取ClassPath的绝对URI路径 // or URL a = 写你的类名.getResource(&amp;#34;&amp;#34;); // 这里是反射的知识, String aa = a.toString(); // 转字符串 int begin = aa.indexOf(&amp;#34;/bin&amp;#34;)+5; aa = aa.substring(begin); // 切去 aa就是了 比如
String xmlPath = MainApp2.class.getResource(&amp;#34;&amp;#34;).toString(); xmlPath = xmlPath.substring(xmlPath.indexOf(&amp;#34;/bin/&amp;#34;)+5); </description>
    </item>
    
    <item>
      <title>控制台光标移动(有尾迹）</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8%E6%9C%89%E5%B0%BE%E8%BF%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8%E6%9C%89%E5%B0%BE%E8%BF%B9/</guid>
      <description>更改了网上的代码，实现有尾迹的移动，
用键盘上的上下左右来控制
这是借鉴地址：C语言之实现控制台光标随意移动
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;windows.h&amp;gt; #include &amp;lt;conio.h&amp;gt; HANDLE hout; //获得输入 char getInput() { int ch; //输入字符串 COORD coord; //屏幕上的坐标 CONSOLE_SCREEN_BUFFER_INFO csbi; //控制台屏幕缓冲区信息 coord.X=11; coord.Y=10; ch=getch(); csbi.dwCursorPosition.X=11; csbi.dwCursorPosition.Y=10; //0x0d表示回车，0XE0表示上下左右等键的键码 while(ch==0xE0||ch==0x0d) { GetConsoleScreenBufferInfo(hout,&amp;amp;csbi);//读取控制台屏幕缓冲信息 coord.X=csbi.dwCursorPosition.X; //得到坐标X的值 coord.Y=csbi.dwCursorPosition.Y; //得到坐标Y的值 ch=getch(); //printf(&amp;#34; &amp;#34;); //上 if(ch==0x48) { if(coord.Y!=0) { coord.Y--; //printf(&amp;#34;%c&amp;#34;,&amp;#39;A&amp;#39;); } } //下 else if(ch==0x50) { coord.Y++; //printf(&amp;#34;%c&amp;#34;,&amp;#39;A&amp;#39;); } //左 else if(ch==0x4b) { if(coord.X!=0){coord.X--;}//printf(&amp;#34;%c&amp;#34;,&amp;#39;A&amp;#39;);} } //右 else if(ch==0x4d) { if(coord.X!=79) { coord.X++; //printf(&amp;#34;%c&amp;#34;,&amp;#39;A&amp;#39;); } } printf(&amp;#34;%c&amp;#34;,&amp;#39;.</description>
    </item>
    
    <item>
      <title>树莓派 raspberry系统 VNC View 连接 Cannot currently show the desktop 错误解决</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E6%A0%91%E8%8E%93%E6%B4%BE-raspberry%E7%B3%BB%E7%BB%9F-vnc-view-%E8%BF%9E%E6%8E%A5-cannot-currently-show-the-desktop-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E6%A0%91%E8%8E%93%E6%B4%BE-raspberry%E7%B3%BB%E7%BB%9F-vnc-view-%E8%BF%9E%E6%8E%A5-cannot-currently-show-the-desktop-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</guid>
      <description>https://www.raspberrypi.org/forums/viewtopic.php?t=216737
我是因为空间不够</description>
    </item>
    
    <item>
      <title>比赛中使用文件输入输出</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E6%AF%94%E8%B5%9B%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E6%AF%94%E8%B5%9B%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>使用文件最简单的方式就是使用输入输出重定向
freopen(&amp;#34;input.txt&amp;#34;,&amp;#34;r&amp;#34;,stdin);//从文件读入 freopen(&amp;#34;outout.txt&amp;#34;,&amp;#34;w&amp;#34;,stdout);//写入文件 非重定向
#include&amp;lt;stdio.h&amp;gt; int main() { FILE *fin,*fout; int x; fin = fopen(&amp;#34;input.txt&amp;#34;,&amp;#34;rb&amp;#34;);//从文件读入 fout = fopen(&amp;#34;outout.txt&amp;#34;,&amp;#34;wb&amp;#34;);//写入文件 fscanf(fin,&amp;#34;%d&amp;#34;,&amp;amp;x); fprintf(fout,&amp;#34;%d&amp;#34;,x); fclose(fin); fclose(fout); return 0; } </description>
    </item>
    
    <item>
      <title>求int型的最大取值（正数）</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E6%B1%82int%E5%9E%8B%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8F%96%E5%80%BC%E6%AD%A3%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E6%B1%82int%E5%9E%8B%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8F%96%E5%80%BC%E6%AD%A3%E6%95%B0/</guid>
      <description>用的是夹值法
#include&amp;lt;stdio.h&amp;gt; int main(){ int i=1,n=1,m; do { n=i; i=i*2; printf(&amp;#34;%d\n&amp;#34;,n); } while((i/2)==n);//n是存数，i去趟雷 putchar(&amp;#39;\n&amp;#39;); m=n; for(;;) { n=m; m+=1; if((m-1)!=n) { printf(&amp;#34;break&amp;#34;); break; } else m-=1; i=1; while(1) { if(i!=1) if((n-i/2)!=m) { printf(&amp;#34;int %d\n&amp;#34;,m); return; } printf(&amp;#34;!!!\n&amp;#34;); if(i!=1) m=n;//m是存数，n去趟雷 n=n+i; i*=2; printf(&amp;#34;%d %d\n&amp;#34;,m,n); } } getchar(); return 0; } 最大值：2147483647</description>
    </item>
    
    <item>
      <title>求最长回文子串</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E6%B1%82%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E6%B1%82%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>一段字符串中出现的正反读一样的子串
当时自己写下的泛泛之词
#include&amp;lt;stdio.h&amp;gt; #define N 20 int main() { char a[N]=&amp;#34;abcb&amp;#34;; char b[N]=&amp;#34;0000&amp;#34;; int i,j,m; for(i=0;i&amp;lt;strlen(a)/2;i++) { for(j=i+1;j&amp;lt;strlen(a);j++) { if(a[i]==a[j]) { printf(&amp;#34;%d %d %d &amp;#34;,i,j ,m); for(m=i;m&amp;lt;=j;m++) { if(a[m]!=a[j+i-m]) break; b[m-i]=a[m]; b[j-i-m]=a[j+i-m]; if((m==j+i-m)||(m==j+i-m-1)) i=j; printf(&amp;#34;%s\n&amp;#34;,b); } } } } printf(&amp;#34;%s\n&amp;#34;,b); return 0; } </description>
    </item>
    
    <item>
      <title>简单聊天机器人(百度语音识别,语音合成,图灵机器人API实现)</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E7%AE%80%E5%8D%95%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E5%9B%BE%E7%81%B5%E6%9C%BA%E5%99%A8%E4%BA%BAapi%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E7%AE%80%E5%8D%95%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E5%9B%BE%E7%81%B5%E6%9C%BA%E5%99%A8%E4%BA%BAapi%E5%AE%9E%E7%8E%B0/</guid>
      <description>百度语音识别API的使用样例（python实现）
【Python】调用百度REST API实现语音识别
python 调用图灵机器人api实现简单的人机交互
百度语音识别api调用 python
Python 调用图灵机器人API
图灵机器人api调用
【Python】调用百度REST API实现语音识别
语音识别的技术原理是什么？
处理音频&amp;ndash;pyaudio
Py之pyaudio：Python库之pyaudio简介、安装、使用方法之详细攻略
关于ALSA lib pcm.c:7843:(snd_pcm_recover) underrun occurred等错误(未解决)
https://blog.csdn.net/gaonii/article/details/69358270
https://blog.petrockblock.com/forums/topic/alsa-lib-pcm-c7339snd_pcm_recover-underrun-occurred/
https://stackoverflow.com/questions/23151269/alsa-lib-pcm-c7843snd-pcm-recover-underrun-occurred-error-in-julia-while
树莓派上安装pyaudio 及 对声音实时监控
http://www.tuling123.com/help/h_cent_webapi.jhtml?nav=doc
http://ai.baidu.com/
http://ai.baidu.com/docs#/ASR-API/top</description>
    </item>
    
    <item>
      <title>背包问题 01 和完全</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-01-%E5%92%8C%E5%AE%8C%E5%85%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-01-%E5%92%8C%E5%AE%8C%E5%85%A8/</guid>
      <description>#include&amp;lt;iostream&amp;gt; using namespace std; int w[] = {0,2,3,4,7}; int v[] = {0,1,3,5,9}; const int Cap = 10; int m[Cap+1][Cap+1] = {0}; int N = 4; void show(); int pack01(){ //https://www.cnblogs.com/Christal-R/p/Dynamic_programming.html for(int i=1;i&amp;lt;=4;i++){ // for(int j=1;j&amp;lt;=Cap;j++){ for(int j=Cap;j&amp;gt;0;j--){ if(j&amp;lt;w[i]){ m[i][j] = m[i-1][j]; }else{ m[i][j] = max(m[i-1][j],m[i-1][j-w[i]]+v[i]); } cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;j&amp;lt;&amp;lt;endl; cout&amp;lt;&amp;lt;v[i]&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;w[i]&amp;lt;&amp;lt;endl; show(); } } } int m2[10] = {0}; int pack01_2(){ for(int i=1;i&amp;lt;=4;i++){ for(int j=Cap;j&amp;gt;0;j--){ if(j &amp;lt; w[i]){ m2[j] = m2[j]; }else{ m2[j] = max( m2[j], m2[j-w[i]] + v[i]); } cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;j&amp;lt;&amp;lt;endl; cout&amp;lt;&amp;lt;m2[j-w[i]] + v[i]&amp;lt;&amp;lt;endl; for(int i=0;i&amp;lt;=Cap;i++) cout&amp;lt;&amp;lt;m2[i]&amp;lt;&amp;lt;&amp;#34; &amp;#34;; cout&amp;lt;&amp;lt;endl; } } } void show(){ for(int i=0;i&amp;lt;=4;i++){ for(int j=0;j&amp;lt;=Cap;j++){ cout&amp;lt;&amp;lt;m[i][j]&amp;lt;&amp;lt;&amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;endl; } cout&amp;lt;&amp;lt;&amp;#34;----------------&amp;#34;&amp;lt;&amp;lt;endl; } int goback(){ int i=N,j=Cap; cout&amp;lt;&amp;lt;m[i][j]&amp;lt;&amp;lt;endl; while(i&amp;gt;0 &amp;amp;&amp;amp; j&amp;gt;0){ cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;j&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;m[i][j]&amp;lt;&amp;lt;endl; if(m[i][j] == m[i-1][j]){ i--; }else{ cout&amp;lt;&amp;lt;&amp;#34;choosen: &amp;#34;&amp;lt;&amp;lt;v[i]&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;w[i]&amp;lt;&amp;lt;endl; j -= w[i]; i--; } } } int packfull(){ // https://blog.</description>
    </item>
    
    <item>
      <title>能被学的东西 【已知】</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E8%83%BD%E8%A2%AB%E5%AD%A6%E7%9A%84%E4%B8%9C%E8%A5%BF-%E5%B7%B2%E7%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E8%83%BD%E8%A2%AB%E5%AD%A6%E7%9A%84%E4%B8%9C%E8%A5%BF-%E5%B7%B2%E7%9F%A5/</guid>
      <description>可新学 Lucene Vertx Clojure Haskell 可深入 Netty Redis </description>
    </item>
    
    <item>
      <title>解决 vboxdrv.sh: failed: Cannot change group vboxusers for device _dev_vboxdrv.</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3-vboxdrv.sh-failed-cannot-change-group-vboxusers-for-device-_dev_vboxdrv./</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3-vboxdrv.sh-failed-cannot-change-group-vboxusers-for-device-_dev_vboxdrv./</guid>
      <description>virtualbox 报错 ,看提示让执行以下
sudo /sbin/vboxconfig 如果报错:
vboxdrv.sh: failed: Cannot change group vboxusers for device /dev/vboxdrv.
那么应该是本用户没有加入vboxusers.
参考:
https://ubuntuforums.org/archive/index.php/t-790303.html
执行:
sudo addgroup vboxusers sudo adduser your_username vboxusers sudo /etc/init.d/vboxdrv setup 即可
错误原因应该是我卸载mysql时将一些旧的配置删了,我不知道,我相信没人会闲到犯和我一样的错误</description>
    </item>
    
    <item>
      <title>解决sublime 的 package control 问题here are no packages available for installation</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3sublime-%E7%9A%84-package-control-%E9%97%AE%E9%A2%98here-are-no-packages-available-for-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3sublime-%E7%9A%84-package-control-%E9%97%AE%E9%A2%98here-are-no-packages-available-for-installation/</guid>
      <description>参考https://blog.csdn.net/zknxx/article/details/52685094
关于 channel_v3.json 文件 ,下载的压缩包里没有, 需要下载https://packagecontrol.io/channel_v3.json 页面
但是这个页面我发现一开始没有打开, 可以在这里下载, https://download.csdn.net/download/su_cicada/10568987
积分至少 1真坑,不想出积分的可以去https://github.com/SuCicada/channel_v3.json 上下载我上传到上面的</description>
    </item>
    
    <item>
      <title>解决sublime不能输入中文，以及输入中文操作异常，以及文字候选框位置异常</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3sublime%E4%B8%8D%E8%83%BD%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E4%BB%A5%E5%8F%8A%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E6%93%8D%E4%BD%9C%E5%BC%82%E5%B8%B8%E4%BB%A5%E5%8F%8A%E6%96%87%E5%AD%97%E5%80%99%E9%80%89%E6%A1%86%E4%BD%8D%E7%BD%AE%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3sublime%E4%B8%8D%E8%83%BD%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E4%BB%A5%E5%8F%8A%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E6%93%8D%E4%BD%9C%E5%BC%82%E5%B8%B8%E4%BB%A5%E5%8F%8A%E6%96%87%E5%AD%97%E5%80%99%E9%80%89%E6%A1%86%E4%BD%8D%E7%BD%AE%E5%BC%82%E5%B8%B8/</guid>
      <description>两种办法：都试试吧，两个都试一遍
https://github.com/YoungZHU/sublime-imfix
强烈第一个，一定要记的sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade 一般解决不了更新一下系统就都好了
https://blog.csdn.net/CV_YOU/article/details/77702383
关于文中改桌面快捷方式的配置文件，来使得其能通过桌面快捷方式打开也能输入中文，有一个更加简单的方法。
如果你之前通过终端输入subl来打开的sublime能输入中文的话，那么这一条就适用。
就是将桌面上sublime的快捷方式的属性中的命令一行：改成 subl 。</description>
    </item>
    
    <item>
      <title>解决Visual Stdio Code python 输出乱码（中文乱码和全部乱码）</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3visual-stdio-code-python-%E8%BE%93%E5%87%BA%E4%B9%B1%E7%A0%81%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E5%92%8C%E5%85%A8%E9%83%A8%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3visual-stdio-code-python-%E8%BE%93%E5%87%BA%E4%B9%B1%E7%A0%81%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E5%92%8C%E5%85%A8%E9%83%A8%E4%B9%B1%E7%A0%81/</guid>
      <description>第一种情况
无论输出什么都是乱码一堆，但是在切换到别的文件输出正常，在排除了代码错误，以及中文输出（下面会说）的情况，那么你只需要看看是不是你的文件名的关系，如果有空格则不行，别的字符还没有尝试。
运行环境：vscode版本：1.19.3
代码语言：python 3.6
第二种情况
在vscode里用ctrl+shift+B直接输出python运行结果时。
print(&amp;#39;是中文吗&amp;#39;) 下面输出栏中却显示的是乱码，而在终端中运行则正常显示中文。
查了很久，尝试了很多办法，改了很多设置。都没用，在不换ide的前提下，终于找见了一种在vscode中能行的办法。
在一个py文件里加上以下内容
#一、如果vs code中输出中文乱码 # -*-coding:utf-8 -*- import io import sys #改变标准输出的默认编码 sys.stdout=io.TextIOWrapper(sys.stdout.buffer,encoding=&amp;#39;utf8&amp;#39;) print(&amp;#39;中文吗&amp;#39;) 即可，如果每次都要写一堆很麻烦，那么就将其作为一个单独的py文件，再写别的py文件时，import进来就行了。
（别问我为什么不用F5来调试，因为我的vs会告诉我 调试适配器进程已意外终止）</description>
    </item>
    
    <item>
      <title>解决Visual Stdio Code 调试时显示“调试适配器进程已意外终止”</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3visual-stdio-code-%E8%B0%83%E8%AF%95%E6%97%B6%E6%98%BE%E7%A4%BA%E8%B0%83%E8%AF%95%E9%80%82%E9%85%8D%E5%99%A8%E8%BF%9B%E7%A8%8B%E5%B7%B2%E6%84%8F%E5%A4%96%E7%BB%88%E6%AD%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E8%A7%A3%E5%86%B3visual-stdio-code-%E8%B0%83%E8%AF%95%E6%97%B6%E6%98%BE%E7%A4%BA%E8%B0%83%E8%AF%95%E9%80%82%E9%85%8D%E5%99%A8%E8%BF%9B%E7%A8%8B%E5%B7%B2%E6%84%8F%E5%A4%96%E7%BB%88%E6%AD%A2/</guid>
      <description>当我按下F5的时候，这个ide告诉我“调试适配器进程已意外终止”，无法调试，断点就失去了作用，这让我十分烦恼，在尝试了网上的所有办法后，比如重新配置launch文件，或者重新安装python插件，重新安装软件，都没有用 。
那么这样的话，不妨试试彻底删除，重新安装软件吧。
在看了https://segmentfault.com/q/1010000008133674中
2个地方需要删除：
C:Users{user}AppDataRoamingCode
C:Users{user}.vscode
其中我在卸载vscode后只删除了第二个文件夹，然后再重新安装1.19.3后，终于可以调试了。</description>
    </item>
    
    <item>
      <title>论如何解决类似如 &#39;&#39;&#39;使用 openresty 库 lua-resty-kafka 对接kafka 报错 no resolver defined to resolve &#34;xxx&#34; &#39;&#39;&#39; 的问题</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E8%AE%BA%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%B1%BB%E4%BC%BC%E5%A6%82-%E4%BD%BF%E7%94%A8-openresty-%E5%BA%93-lua-resty-kafka-%E5%AF%B9%E6%8E%A5kafka-%E6%8A%A5%E9%94%99-no-resolver-defined-to-resolve-xxx-%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E8%AE%BA%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%B1%BB%E4%BC%BC%E5%A6%82-%E4%BD%BF%E7%94%A8-openresty-%E5%BA%93-lua-resty-kafka-%E5%AF%B9%E6%8E%A5kafka-%E6%8A%A5%E9%94%99-no-resolver-defined-to-resolve-xxx-%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>始苦寻无果，终幸得其所
参考项目的issue
https://github.com/doujiang24/lua-resty-kafka/issues/5
这个issue已经将问题说的很明白了
在我电脑上当时的表现就是lua从kafka获取到的broker的host一直是ubuntu
而我明明给lua中配置的host是ip地址。
而ubuntu这个域名在/etc/hosts中有设置，但是在我去掉域名解析，重启电脑之后，还是没有解决。
因为有这个被动ip转成了本地域名的灵异现象存在，使得lua-resty-kafka库无法解析域名，导致生产者无法向kafka推送数据。
而解决办法则是在kafka的配置文件 server.properties中设置
host.name= {你的ip或域名}
更新: 原因研究
根据:kafka主机名解析hostname
我们查看zookeeper中关于kafka的brokers的信息
[zk: localhost:2181(CONNECTED) 0] get /brokers/ids/0
{&amp;ldquo;listener_security_protocol_map&amp;rdquo;:{&amp;ldquo;PLAINTEXT&amp;rdquo;:&amp;ldquo;PLAINTEXT&amp;rdquo;},&amp;ldquo;endpoints&amp;rdquo;:[&amp;ldquo;PLAINTEXT://ubuntu:9092&amp;rdquo;],&amp;ldquo;jmx_port&amp;rdquo;:-1,&amp;ldquo;host&amp;rdquo;:&amp;ldquo;ubuntu&amp;rdquo;,&amp;ldquo;timestamp&amp;rdquo;:&amp;ldquo;1584515322686&amp;rdquo;,&amp;ldquo;port&amp;rdquo;:9092,&amp;ldquo;version&amp;rdquo;:4}
从中果然发现了ubuntu:9092，所以问题出在zookeeper。
然后继续搜索，找到
如何避免将Kafka broker机器的hostname注册进zookeeper
其中提到了配置文件的注释提示信息，翻回去一看
# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for &amp;ldquo;listeners&amp;rdquo; if configured. Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092
果然，如果没有配置就使用 java.net.InetAddress.getCanonicalHostName()获得。
到服务器上使用命令执行一看
java&amp;gt; java.net.InetAddress.getLocalHost().getCanonicalHostName(); java.lang.String res0 = &amp;#34;ubuntu&amp;#34; 果然如此！</description>
    </item>
    
    <item>
      <title>读取properties配置文件路径找不到的解决方法</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E8%AF%BB%E5%8F%96properties%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E8%AF%BB%E5%8F%96properties%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>public class DB_connection { String JDBC_DRIVER;//=&amp;#34;com.mysql.jdbc.Driver&amp;#34;; String DB_URL;// = &amp;#34;jdbc:mysql://localhost:3306/promotion_website?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;#34;; String FILENAME = &amp;#34;/database.properties&amp;#34;; String USER;// = &amp;#34;root&amp;#34;; String PASS;// = &amp;#34;mysql&amp;#34;; Connection conn = null; public DB_connection() { try { Properties prop = new Properties(); String FILE_PATH = this.getClass().getClassLoader().getResource(FILENAME).getPath(); System.out.println(&amp;#34;path &amp;#34;+FILE_PATH); File file = new File(FILE_PATH); FileInputStream in = new FileInputStream(file); prop.load(in); JDBC_DRIVER = prop.getProperty(&amp;#34;JDBC_DRIVER&amp;#34;); DB_URL = prop.getProperty(&amp;#34;DB_URL&amp;#34;); USER = prop.getProperty(&amp;#34;USER&amp;#34;); PASS = prop.getProperty(&amp;#34;PASS&amp;#34;); } catch (FileNotFoundException ex) { Logger.</description>
    </item>
    
    <item>
      <title>颠倒字符串（整体，子串）</title>
      <link>https://sucicada.github.io/blog/posts/soft/%E9%A2%A0%E5%80%92%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B4%E4%BD%93%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sucicada.github.io/blog/posts/soft/%E9%A2%A0%E5%80%92%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B4%E4%BD%93%E5%AD%90%E4%B8%B2/</guid>
      <description>这是对整体的字符串镜像
#include &amp;lt;stdio.h&amp;gt; int main(void) { char a[9] = &amp;#34;abcdef&amp;#34;; int i,j;//j是最后一位，i是执行位 j=strlen(a)-1; printf(&amp;#34;%s\n&amp;#34;,a); for(i=0;i&amp;lt;strlen(a)/2;i++) { a[i]+=a[j-i]; a[j-i]=a[i]-a[j-i]; a[i]=a[i]-a[j-i]; printf(&amp;#34;%s\n&amp;#34;,a); } return 0; } 这是对子串镜像
#include &amp;lt;stdio.h&amp;gt; int main(void) { char a[] = &amp;#34;012 4567 910&amp;#34;; int i,j,t;//j是最后一位，i是执行位 j=7; t=i=4;//t记录下变换部分的第一位 printf(&amp;#34;%s\n&amp;#34;,a); for(;i&amp;lt;(j+t+1)/2;i++) { a[i]+=a[j-i+t]; a[j-i+t]=a[i]-a[j-i+t]; a[i]=a[i]-a[j-i+t]; printf(&amp;#34;%s\n&amp;#34;,a); } return 0; } </description>
    </item>
    
  </channel>
</rss>
